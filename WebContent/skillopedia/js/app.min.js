// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia", [
		"ngRoute",
		// "mobile-angular-ui",
		// "mobile-angular-ui.core",
		"LocalStorageModule",
		"ngSanitize",
		"flow",
		"textAngular",
		"720kb.datepicker",
		// "timer"
	])
	.config(["$routeProvider", "$httpProvider", "$locationProvider", "$provide", "localStorageServiceProvider", "config", function($routeProvider, $httpProvider, $locationProvider, $provide, localStorageServiceProvider, config) {
		angular.forEach(config.interceptor, function(path) {
			var controllername = path.replace(/_[a-z]/g, function(letter) {
				return letter.split("_")[1].toUpperCase();
			});
			controllername = controllername + "Controller";
			$routeProvider.when("/" + path, {
				templateUrl: "/skillopedia/templates/" + path + ".html",
				reloadOnSearch: true,
				controller: controllername,
				resolve: {
					user: ["$rootScope", "$q", "$location", "$interval", "localStorageService", function($rootScope, $q, $location, $interval, localStorageService) {
						var resolve_path = ["account", "courses", "comments", "create_course", "edit_course", "edit_step", "shoppingcart", "orders", "order", "order_booking", "order_comment", "skillopedia", "authenication", "orders_management", "order_management", "order_confirm", "order_cancel", "order_finish", "order_refund", "schedule", "steps", "steps_publish", "favourite", "messages", "coupons"],
							defer = $q.defer();
						// 未登录;
						if (resolve_path.includes(path) && !localStorageService.get("token")) {
							defer.reject();
							$location.path("/landing").replace();
							return;
						}
						// 登录过,获取用户信息
						if (resolve_path.includes(path) && localStorageService.get("token")) {
							var timer = $interval(function() {
								if ($rootScope.user) {
									$interval.cancel(timer);
									defer.resolve();
								}
							}, 10);
						} else {
							// 其他不需要登录的地方，直接resolve
							defer.resolve();
						}
						return defer.promise;
					}]
				}
			})
		})
		$routeProvider.otherwise("/index");
		$httpProvider.defaults.useXDomain = true;
		// $httpProvider.defaults.withCredentials = true;
		delete $httpProvider.defaults.headers.common["X-Requested-With"];
		localStorageServiceProvider.setStorageCookie(1 / 50);
		$httpProvider.interceptors.push('tokenInterceptor');
	}]).run(["appServices", function(appServices) {
		// init event such as routechangestart...
		appServices.init();
	}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("utilServices", ["$q", function($q) {
	var dataURItoBlob = function(dataURI) {
		// convert base64/URLEncoded data component to raw binary data held in a string
		var byteString;
		if (dataURI.split(',')[0].indexOf('base64') >= 0)
			byteString = atob(dataURI.split(',')[1]);
		else
			byteString = unescape(dataURI.split(',')[1]);

		// separate out the mime component
		var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

		// write the bytes of the string to a typed array
		var ia = new Uint8Array(byteString.length);
		for (var i = 0; i < byteString.length; i++) {
			ia[i] = byteString.charCodeAt(i);
		}

		return new Blob([ia], {
			type: mimeString
		});
	};

	var resizeFile = function(file) {
		var deferred = $q.defer();
		var file_type = file.type;
		var img = document.createElement("img");
		try {
			var reader = new FileReader();
			reader.onload = function(e) {
				img.src = e.target.result;

				//resize the image using canvas
				var canvas = document.createElement("canvas");
				var ctx = canvas.getContext("2d");
				ctx.drawImage(img, 0, 0);
				var MAX_WIDTH = 800;
				var MAX_HEIGHT = 800;
				var width = img.width;
				var height = img.height;
				if (width > height) {
					if (width > MAX_WIDTH) {
						height *= MAX_WIDTH / width;
						width = MAX_WIDTH;
					}
				} else {
					if (height > MAX_HEIGHT) {
						width *= MAX_HEIGHT / height;
						height = MAX_HEIGHT;
					}
				}
				canvas.width = width;
				canvas.height = height;
				var ctx = canvas.getContext("2d");
				ctx.drawImage(img, 0, 0, width, height);

				//change the dataUrl to blob data for uploading to server
				var dataURL = canvas.toDataURL(file_type);
				var blob = dataURItoBlob(dataURL);

				deferred.resolve(blob);
			};
			reader.readAsDataURL(file);
		} catch (e) {
			deferred.resolve(e);
		}
		return deferred.promise;

	};
	return {
		resizeFile: resizeFile,
	};

}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("userServices", ["$rootScope", "$http", "apiServices", "facebookServices", "localStorageService", "config", function($rootScope, $http, apiServices, facebookServices, localStorageService, config) {
	return {
		rsa_key: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: "/skillopedia/key/private_key.pem",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		upload_image: apiServices._post_formdata(angular.extend({}, config.common_params, {
			url: config.url + "/app/Experiences/updatePic2",
			token: localStorageService.get("token")
		})),
		upload_avatar: apiServices._get(angular.extend({}, config.common_params, {
			url: config.url + "/app/UserCenter/UpdateAvatarH5",
			token: localStorageService.get("token")
		})),
		signin: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/UserCenter/Login",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		signup: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/UserCenter/RegistTel",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		forget: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/UserCenter/sendForgetEmail",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		resend_email: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/UserCenter/resetSendEmailActivate",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		reset: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/UserCenter/resetPassword",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		login_by_oauth: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/UserCenter/isThirdLoginRelated",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		binding_account: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/UserCenter/thirdLogin",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		query_basicinfo: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/UserCenter/baseInfo",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		query_basicinfo_id: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/PersonalHomepage/personalInfo",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		modify_avatar: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/UserCenter/UpdateAvatar",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		modify_nickname: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/UserCenter/UpdateNickname",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		sync: function() {
			var self = this;
			self.query_basicinfo().then(function(data) {
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					$rootScope.user = undefined;
					$rootScope.user = angular.extend({}, $rootScope.user, data.Result.UserInfo);
				} else {
					self.logout();
				}
			});
		},
		logout: function() {
			$rootScope.user = {};
			localStorageService.remove("token");
			localStorageService.remove("user");
			localStorageService.remove("t_uid");
			localStorageService.remove("f_uid");
			facebookServices.logout();
		},
		// 个人主页 
		// 基本信息，课程列表，评论列表，经历列表
		query_user_by_id: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/PersonalHomepage/personalInfo",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		query_courses_by_user_id: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/PersonalHomepage/taCourseList",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		query_comments_by_user_id: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/PersonalHomepage/taCommentList",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 经历列表
		query_steps_by_user_id: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/PersonalHomepage/taExperienceList",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 经历详情
		query_step_by_user_id: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/PersonalHomepage/experienceInfo",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 教练认证
		authenication: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/UserCenter/authen",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 个人中心
		// 我的经历 撰写经历
		query_steps: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Experiences/experienceList",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		remove_step: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Experiences/deleteExperience",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		create_step: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Experiences/addExperience",
				method: "POST",
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded'
				},
				transformRequest: function(obj) {
					var str = [];
					for (var p in obj)
						str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
					return str.join("&");
				},
				data: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		edit_step: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Experiences/editExperience",
				method: "POST",
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded'
				},
				transformRequest: function(obj) {
					var str = [];
					for (var p in obj)
						str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
					return str.join("&");
				},
				data: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 收藏 取消收藏 收藏列表
		like: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Courses/addCollectionCourse",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		unlike: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Courses/deleteCollectionCourse",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		favourite: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Courses/myCollectionCourseList",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		query_messages: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CommentManage/commentList",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		remove_message: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CommentManage/deleteComment",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		reply_message: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CommentManage/commentReply",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 优惠券 过期优惠券 选择优惠券
		query_coupons: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CouponManage/myCouponList",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// get coupons
		get_coupon: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CouponManage/getCoupon",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// remove coupon
		remove_coupon: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CouponManage/deteleMyCoupon",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("tokenInterceptor", ["$location", "$rootScope", "$q", "localStorageService", "toastServices", "errorServices", "config", function($location, $rootScope, $q, localStorageService, toastServices, errorServices, config) {
	var request_count = 0;
	return {
		// optional method
		'request': function(config) {
			// do something on success
			if (config.url.indexOf("/app/UserCenter/baseInfo") == -1) {
				++request_count == 1 && toastServices.start();
			}
			// The language can be configured any other way.

			// We'll eventually use $("html").attr("lang").

			config.headers["Accept-Language"] = "en";
			return config;
		},
		// optional method
		'requestError': function(rejection) {
			// console.log(rejection)
			// do something on error
			// if (canRecover(rejection)) {
			//     return responseOrNewPromise
			// }
			// return $q.reject(rejection);
		},
		// optional method
		'response': function(response) {
			if (config.url.indexOf("/app/UserCenter/baseInfo") == -1) {
				--request_count == 0 && toastServices.done();
			}
			// do something on success
			var defer = $q.defer();
			// static response
			if (response.config.url.indexOf(".html") > 0) {
				return response;
			}
			// server response
			if (response.data.code == config.request.TOKEN_INVALID) {
				console.log("TOKEN_INVALID")
				localStorageService.remove("token");
				// $location.path("/landing").replace();
				$location.path("/index").replace();
				return defer.promise;
			} else {
				return response;
			}
			return response;
		},
		// optional method
		'responseError': function(rejection) {
			var defer = $q.defer();
			errorServices.requestError(rejection.data, rejection.status, rejection.headers, rejection.config);
			return defer.promise;
		}
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("toastServices", function() {
	return {
		show: function() {
			$(".toast").show();
		},
		hide: function() {
			$(".toast").hide();
		},
		show_toast_animation: function() {
			$(".toast_with_animation").addClass("active");
		},
		hide_toast_animation: function() {
			$(".toast_with_animation").removeClass("active");
		},
		start: function() {
			NProgress.start();
			// NProgress.set(0) == NProgress.start();
			// NProgress.set(0.4);
		},
		done: function() {
			NProgress.done();
		}
	}
});
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("skillopediaServices", ["$http", "localStorageService", "config", function($http, localStorageService, config) {
	return {
		query_banner: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/IndexBannerManage/homeBanner",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		query_base_category: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Home/category01List",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		query_second_category: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Home/category02List",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		query_all_second_category: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CatetoryManage/categoryList",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		query_recommand_category: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Home/hotRecommandList",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		query_hot_category: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "interface",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// upload image ,return image url
		upload: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Experiences/updatePic",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// zipcode
		query_zipcode: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Home/cityList",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// feedback
		feedback: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/FeedBackManage/feedback",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 判断用户输入的地址是否在教练提供的travel distance范围内
		query_location_in_services: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CourseManage/isFulfilTravelDistance",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 获取美国State
		query_us_state: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: "/skillopedia/lib/remote/us_state.json",
				method: "GET",
			}).then(function(data) {
				return data.data;
			});
		},
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("shoppingcartServices", ["$http", "localStorageService", "config", function($http, localStorageService, config) {
	return {
		query: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CartManage/myCartList",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		}
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("scheduleServices", ["$http", "localStorageService", "config", function($http, localStorageService, config) {
	return {
		query: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/ScheduleManage/scheduleList",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		query_by_course: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/TimeOrdersManage/bookingScheduleList",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		set_busy: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/ScheduleManage/setBusyTime",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		set_free: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/ScheduleManage/setFreeTime",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		set_one_day_busy: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/ScheduleManage/setAllBusyTime",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		set_all_day_busy: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/ScheduleManage/setStopCourse",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("orderServices", ["$http", "localStorageService", "config", function($http, localStorageService, config) {
	return {
		// 我的订单列表
		query: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/OrdersManage/ordersList",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 我的订单详情
		query_by_id: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/OrdersManage/orderInfo",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 下单课程详情
		query_course: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/OrdersManage/orderCourseInfo",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 下单，查看优惠券
		query_coupons: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/OrdersManage/courseCouponList2",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 确认下单,加入购物车
		fillinorder: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/OrdersManage/addPay",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 购物车数量
		query_shoppingcart_count: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/OrdersManage/cardNum",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 删除下单,购物车
		remove: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/OrdersManage/deletePayOrder",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 预约时间
		booking: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/TimeOrdersManage/booking",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 支付信息
		query_payment: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/OrdersManage/payMoney",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 发起支付
		pay: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/OrdersManage/comfiyPay",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 提交账单地址
		post_billing_address: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/OrdersManage/updateOrdersInfo",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 发起支付
		pay_by_visa: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Pays/verifyVisaWebPayments",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 退款列表
		query_refund: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/OrdersManage/refundList",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 退款
		refund: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/OrdersManage/refundOrders",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 管理订单列表
		query_manage_orders: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CoachOrdersManage/coachOrdersList",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 管理订单列表
		query_manage_order: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CoachOrdersManage/coachOrderInfo",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 教练确认，取消，完成课程,查询日期
		query_schedule_date: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CoachOrdersManage/coachOrdersScheduleListA",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 教练确认，取消，完成课程，查询整天时间
		query_schedule_time: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CoachOrdersManage/coachOrdersScheduleListB",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		confirm_or_reject: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CoachOrdersManage/rejectConfirmOrders",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		cancel: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CoachOrdersManage/cancelOrders",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		finish: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CoachOrdersManage/finishOrders",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 发表评论界面
		query_course_by_comment: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CommentManage/commentCourseInfo",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		comment: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CommentManage/comment",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("googleMapServices", ["$http", "$q", "config", function($http, $q, config) {
	return {
		create_map: function(container, latlng) {
			var map = new google.maps.Map(container, {
				zoom: 11,
				minZoom: 9,
				maxZoom: 12,
				center: latlng,
				// disableDoubleClickZoom: true,
				// draggable: true,
				// scrollwheel: false,
				// zoomControl: false,
				// mapTypeId: google.maps.MapTypeId.TERRAIN
			});
			return map;
		},
		create_marker: function(map, latlng) {
			var marker = new google.maps.Marker({
				position: latlng,
				map: map,
				// draggable: true,
			});
			return marker;
		},
		create_circle_marker: function(map, latlng) {
			var marker = new google.maps.Marker({
				position: latlng,
				map: map,
				icon: {
					url: "/skillopedia/images/spotlight-poi.png",
					// origin: new google.maps.Point(50, 50)
				},
				draggable: false,
			});
			return marker;
		},
		create_circle: function(map, latlng) {
			var cityCircle = new google.maps.Circle({
				strokeColor: '#0087ff',
				strokeOpacity: 0.8,
				strokeWeight: 2,
				fillColor: '#0087ff',
				fillOpacity: 0.35,
				map: map,
				center: latlng,
				radius: 100
			});
			return cityCircle;
		},
		// code address by http
		geocoding: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: "https://maps.googleapis.com/maps/api/geocode/json?language=en",
				method: "GET",
				params: angular.extend({}, {
					key: config.key.google
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// code address by google map Geocoder
		code_address: function(address) {
			var defer = $q.defer();
			var geocoder = new google.maps.Geocoder();
			geocoder.geocode({
				"address": address
			}, function(results, status) {
				if (status == google.maps.GeocoderStatus.OK) {
					defer.resolve({
						lat: results[0].geometry.location.lat(),
						lng: results[0].geometry.location.lng()
					});
				}
			})
			return defer.promise;
		},
		geolocation: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: "https://www.googleapis.com/geolocation/v1/geolocate?key=AIzaSyDIpIlb2GW79e-dFuxvs43YyrG9GQaaIpc",
				method: "POST",
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded'
				},
				transformRequest: function(obj) {
					var str = [];
					for (var p in obj)
						str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
					return str.join("&");
				}
			}).then(function(data) {
				return data.data;
			});
		},
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("facebookServices", ["$rootScope", "$route", "$http", "$window", "$location", "$q", "toastServices", "errorServices", "localStorageService", "config", function($rootScope, $route, $http, $window, $location, $q, toastServices, errorServices, localStorageService, config) {
    $window.fbAsyncInit = function() {
        var FB = $window.FB || undefined;
        if (!FB) return;
        FB.init({
            appId: '1679842542345876',
            xfbml: true,
            version: 'v2.6'
        });
    };
    return {
        // facebook share;
        share: function(link) {
            var FB = $window.FB || undefined;
            if (!FB) return;
            FB.ui({
                method: "feed",
                link: link || config.share.link,
                redirect_uri: link || config.share.link,
                caption: config.share.title
            }, function(response) {
                $route.reload();
            });
        },
        // facebook login
        login: function() {
            var deferred = $q.defer();
            var self = this;
            self._facebook_connected()
                .then(function(data) {
                    return data;
                })
                .then(function(data) {
                    self._query_facebook_user_info()
                        .then(function(data) {
                            deferred.resolve(data);
                        })
                })
            return deferred.promise;
        },
        logout: function() {
            var deferred = $q.defer();
            var FB = $window.FB || undefined;
            if (!FB) return;
            FB.logout(function(response) {
                deferred.resolve(response);
            })
            return deferred.promise;
        },
        _facebook_connected: function() {
            var deferred = $q.defer();
            var FB = $window.FB || undefined;
            if (!FB) return;
            FB.login(function(response) {
                if (response.status == "connected") {
                    deferred.resolve(response);
                } else {
                    toastServices.hide();
                    deferred.reject('_facebook_connected occured');
                }
            }, {
                scope: 'public_profile,email'
            });
            return deferred.promise;
        },
        _query_facebook_user_info: function() {
            var deferred = $q.defer();
            var FB = $window.FB || undefined;
            if (!FB) return;
            FB.api("/me", {
                    fields: "id,email,name,picture,gender,last_name"
                },
                function(response) {
                    if (!response || response.error) {
                        deferred.reject('_query_facebook_user_info error occured');
                    } else {
                        deferred.resolve(response);
                    }
                });
            return deferred.promise;
        },
    }
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("errorServices", ["$rootScope", "$timeout", "toastServices", function($rootScope, $timeout, toastServices) {
	return {
		show: function(error) {
			$rootScope.error_msg = error;
			$(".error-msg").show();
		},
		hide: function() {
			$rootScope.error_msg = "";
			$(".error-msg").hide();
		},
		autoHide: function(error, duration) {
			var duration = duration || 3000;
			$rootScope.error_msg = error;
			$(".error-msg").show();
			$timeout(function() {
				$rootScope.error_msg = "";
				$(".error-msg").hide();
			}, duration)
		},
		requestError: function(data, status, headers, config) {
			// hide toast
			toastServices.hide();
			// tip error
			switch (status) {
				case 0:
					this.autoHide("Connect Timeout");
					break;
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 507:
				case 509:
				case 510:
					this.autoHide("Server Error");
					break;
				default:
					;
			}
			console.log("onRequestError output status, data, headers, config")
			console.log(status);
			console.log(data);
			console.log(headers)
			console.log(config);
			console.log("onRequestError end")
		}
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("coursesServices", ["$http", "localStorageService", "config", function($http, localStorageService, config) {
	return {
		// 课程列表
		query: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CatetoryManage/courseList",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 课程详情
		query_by_id: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Courses/courseInfo2",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 获取编辑课程详情
		query_by_user: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CourseManage/courseInfo",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 课程详情评价列表
		query_comment_by_course: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Courses/courseCommentList",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 关键字搜索
		search_by_keyword: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/Home/searchList",
				method: "GET",
				params: angular.extend({}, config.common_params, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 管理课程 管理课程列表 管理课程详情 管理课程分类列表 新增课程 新增证书 删除证书
		query_courses_by_user: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CourseManage/myCourseList",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 管理课程详情
		query_course_by_user: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CourseManage/addCourse",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 新建课程 两级分类
		query_category: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CourseManage/categoryList",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// call when enter in create course page
		prapare_create_course: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CourseManage/newCoursePremiss",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		create_course: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CourseManage/addCourse",
				// method: "GET",
				method: "POST",
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded'
				},
				transformRequest: function(obj) {
					var str = [];
					for (var p in obj)
						str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
					return str.join("&");
				},
				data: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		edit_course: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CourseManage/editCourse",
				method: "POST",
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded'
				},
				transformRequest: function(obj) {
					var str = [];
					for (var p in obj)
						str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
					return str.join("&");
				},
				data: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		remove_course: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CourseManage/deleteCourse",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		create_certification: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CourseManage/addCourseCertification",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		edit_certification: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CourseManage/editCourseCertification",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		remove_certification: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CourseManage/deleteCourseCertification",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
		// 查询证书返回接口
		query_certification: function(input) {
			return $http({
				// by dribehance <dribehance.kksdapp.com>
				url: config.url + "/app/CourseManage/editCourseCertification",
				method: "GET",
				params: angular.extend({}, config.common_params, {
					token: localStorageService.get("token")
				}, input)
			}).then(function(data) {
				return data.data;
			});
		},
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("browserServices", function() {
	var tips = "<!-- ie -->" +
		"<div class='overlay'>" +
		"<div class='browser-message text-center'>" +
		"<h1>May be Chrome should be your first choice !</h1>" +
		"<a class='btn btn-primary' ng-href='http://www.google.cn/chrome/browser' target='_blank'>download chrome</a>" +
		"</div>" +
		"</div>";
	return {
		// Opera 8.0+
		isOpera: (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0,
		// Firefox 1.0+
		isFirefox: typeof InstallTrigger !== 'undefined',
		// At least Safari 3+: "[object HTMLElementConstructor]"
		isSafari: Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0,
		// Internet Explorer 6-11
		isIE: /*@cc_on!@*/ false || !!document.documentMode,
		// Edge 20+
		isEdge: !this.isIE && !!window.StyleMedia,
		// Chrome 1+
		isChrome: !!window.chrome && !!window.chrome.webstore,
		// Blink engine detection
		isBlink: (this.isChrome || this.isOpera) && !!window.CSS,
		detect: function() {
			if (this.isIE && $("html").hasClass("lt-ie10")) {
				$("body").append($(tips))
			}
		}
	}
});
 // by dribehance <dribehance.kksdapp.com>
 // EventHandle
 angular.module("Skillopedia").factory("appServices", ["$rootScope", "$window", "$location", "$timeout", "browserServices", "googleMapServices", "userServices", "localStorageService", "errorServices", "toastServices", "config", function($rootScope, $window, $location, $timeout, browserServices, googleMapServices, userServices, localStorageService, errorServices, toastServices, config) {
 	var routeChangeStart = function(e) {
 		// do something white routechangestart,eg:
 		// toastServices.start();
 	}
 	var routeChangeSuccess = function(e, currentRoute, prevRoute) {
 		// do something white routechangesuccess,eg:
 		toastServices.hide();
 		errorServices.hide();
 		// toastServices.done();
 		navBarHandler(e, currentRoute, prevRoute);
 	}
 	var routeChangeError = function(e, currentRoute, prevRoute) {
 		// do something white routechangesuccess,eg:
 		// $rootScope.back();
 	}
 	var navBarHandler = function(e, currentRoute, prevRoute) {
 		// handle navbar
 	}
 	var onBackKeyDown = function() {
 		$rootScope.$apply(function() {
 			$rootScope.back();
 		});
 	}

	var popup_signup_delay = function() {
		$.magnificPopup.close();
		$timeout(function() {
			$.magnificPopup.open({
 			items: {
 				src: '#signin-popup'
 			},
 			type: 'inline'
 		}, 0);
 			 
 		}, 500)
 	}

 	var popup_signin = function() {
		 console.log("pop up sin")
		$.magnificPopup.close();


		$.magnificPopup.open({
 			items: {
 				src: '#signin-popup'
 			},
 			type: 'inline'
 		}, 0);
 			 
 	
 	
 	}

	var popup_coupon = function() {
 		$.magnificPopup.open({
 			items: {
 				src: '#coupon-popup'
 			},
 			type: 'inline'
 		}, 0);
 	}

 	var close_popup_signin = function() {
 		$.magnificPopup.close();
 	}
 	return {
 		init: function() {
 			$rootScope.$on("$routeChangeStart", routeChangeStart);
 			$rootScope.$on("$routeChangeSuccess", routeChangeSuccess);
 			$rootScope.$on("$routeChangeError", routeChangeError);
 			$rootScope.signin = function() {
 				$rootScope.sign = "signin";
 				popup_signin();
 			}
 			$rootScope.signup = function() {
 				$rootScope.sign = "signup";
 				popup_signin();
 			}
 			$rootScope.forget = function() {
 				$rootScope.sign = "forget";
 				popup_signin();
 			}
 			$rootScope.back = function() {
 				$window.history.back();
 			}
 			$rootScope.go = function(path) {
 				$location.path(path);
 			}
 			$rootScope.popup_signin = function() {
 				popup_signin();
 			}
			$rootScope.popup_signup_delay = function() {
				$rootScope.sign = "signup";
 				popup_signup_delay();
 			}

 			$rootScope.close_popup_signin = function() {
 				close_popup_signin();
 			}
 			$rootScope.is_signin = function() {
 				if (localStorageService.get("token")) {
 					return true;
 				}
 				return false;
 			}
 			if (localStorageService.get("token")) {
 				userServices.sync();
 			}
 			$rootScope.staticImageUrl = config.imageUrl;
 			$rootScope.sr = ScrollReveal({
 				delay: 200,
 			});
 			// $rootScope.isIE = false;
 			// if (browserServices.isIE) {
 			// 	$rootScope.isIE = true;
 			// }
 			// $rootScope.onload = false;
 			browserServices.detect();
 			// $timeout(function() {
 			// 	googleMapServices.geolocation().then(function(data) {
 			// 		console.log(data)
 			// 	})
 			// }, 10000)
 		},
		 pop_coupon: function() {
 			popup_coupon();
		 }
 	}
 }]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").factory("apiServices", ["$http", "localStorageService", function($http, localStorageService) {
	return {
		_get: function(request) {
			return function(input) {
				if (request.token !== undefined) {
					request.token = localStorageService.get("token")
				}
				return $http({
					// by dribehance <dribehance.kksdapp.com>
					url: request.url,
					cache: request.cache || true,
					method: "GET",
					params: angular.extend({}, request, input)
				}).then(function(data) {
					return data.data;
				});
			}
		},
		_post: function(request) {
			return function(input) {
				if (request.token !== undefined) {
					request.token = localStorageService.get("token")
				}
				return $http({
					// by dribehance <dribehance.kksdapp.com>
					url: request.url,
					method: "POST",
					cache: request.cache || true,
					headers: {
						'Content-Type': 'application/x-www-form-urlencoded'
					},
					transformRequest: function(obj) {
						var str = [];
						for (var p in obj)
							str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
						return str.join("&");
					},
					data: angular.extend({}, request, input)
				}).then(function(data) {
					return data.data;
				});
			}
		},
		_post_formdata: function(request) {
			return function(formdata) {
				if (request.token !== undefined) {
					request.token = localStorageService.get("token")
				}
				for (key in request) {
					formdata.append(key, request[key]);
				}
				return $http({
					// by dribehance <dribehance.kksdapp.com>
					url: request.url,
					method: "POST",
					cache: request.cache || true,
					headers: {
						'Content-Type': undefined
					},
					transformRequest: angular.identity,
					data: formdata
				}).then(function(data) {
					return data.data;
				});
			}
		}
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("supportController", ["$scope", "errorServices", "toastServices", "localStorageService", "config", function($scope, errorServices, toastServices, localStorageService, config) {
	$scope.view = 'customers';
	$scope.jump = function(t) {
		$scope.view = t;
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("stepsPublishController", ["$scope", "$location", "$window", "$timeout", "$route", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $location, $window, $timeout, $route, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.input = {};
	$scope.input.step_status = "1";
	$scope.$watch("input.step_status", function(n, o) {
		if (n == undefined) {
			return;
		};
		$scope.query_steps();
	});
	$scope.query_steps = function() {
		$scope.steps = [];
		toastServices.show();
		userServices.query_steps({
			status: $scope.input.step_status
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.steps = data.Result.Experiences;
				$scope.steps_message = $scope.steps.length == 0 ? "暂无经历" : "";
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
	$scope.edit_step = function(id, e) {
		e.preventDefault();
		e.stopPropagation();
		var url = $location.protocol() + "://" + $location.host() + ":" + $location.port() + "/#/edit_step?id=" + id;
		$window.open(url);
	}
	$scope.remove_step = function(id, e) {
		e.preventDefault();
		e.stopPropagation();
		$scope.confirm.content = "Delete step ?";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			userServices.remove_step({
				experience_id: id
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$timeout(function() {
						$route.reload();
					}, 2000)
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("stepDraftController", ["$scope", "errorServices", "toastServices", "localStorageService", "config", function($scope, errorServices, toastServices, localStorageService, config) {

}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("stepsController", ["$scope", "$rootScope", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, userServices, errorServices, toastServices, localStorageService, config) {
	toastServices.show();
	userServices.query_steps_by_user_id({
		user_id: $rootScope.user.user_id
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.steps = data.Result.TaExperiences;
			$scope.steps_message = $scope.steps.length == 0 ? "暂无经历" : "";
		} else {
			errorServices.autoHide(data.message);
		}
	})
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("stepController", ["$scope", "$rootScope", "$routeParams", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $routeParams, userServices, errorServices, toastServices, localStorageService, config) {
	if (!$routeParams.experience_id) {
		$rootScope.back()
	}
	toastServices.show();
	userServices.query_step_by_user_id({
		experience_id: $routeParams.id
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.step = data.Result.ExperienceInfo;
		} else {
			errorServices.autoHide(data.message);
		}
	})
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("skillopediaController", ["$scope", "$rootScope", "$route", "$window", "$location", "$timeout", "coursesServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $route, $window, $location, $timeout, coursesServices, errorServices, toastServices, localStorageService, config) {
	// 未认证，跳转认证
	// agent_level 1:普通用户 2:教练
	if ($rootScope.user.agent_level != "2") {
		$location.path("authenication").replace();
		return;
	}
	$scope.courses = [];
	$scope.page = {
		pn: 1,
		page_size: 10,
		message: "Load More",
		latitude: "0",
		longitude: "0"
	}
	$scope.loadMore = function() {
		if ($scope.no_more) {
			return;
		}
		toastServices.show();
		$scope.page.message = "loading...";
		coursesServices.query_courses_by_user($scope.page).then(function(data) {
			toastServices.hide();
			$scope.page.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.courses = $scope.courses.concat(data.Result.Courses.list);
				$scope.no_more = $scope.courses.length == data.Result.Courses.totalRow ? true : false;
			} else {
				errorServices.autoHide("Server error");
			}
			if ($scope.no_more) {
				if ($scope.courses.length == 0) {
					$scope.page.message = "No record found";
				}
				if ($scope.courses.length == 1) {
					$scope.page.message = data.Result.Courses.totalRow + " record found ";
				}
				if ($scope.courses.length > 1) {
					$scope.page.message = data.Result.Courses.totalRow + " records found ";
				}
			}
			$scope.page.pn++;
		})

	}
	$scope.loadMore();
	// go to detail
	$scope.local_go = function(id) {
		$location.path("detail").search({
			category: null,
			cagegory_id: null,
			course_id: id
		});
	};
	// edit course
	$scope.edit_course = function(course_id, e) {
		e.preventDefault();
		e.stopPropagation();
		var url = $location.protocol() + "://" + $location.host() + ":" + $location.port() + "/#/edit_course?id=" + course_id;
		$window.open(url);
	};
	// remove course
	$scope.remove_course = function(course_id, e) {
		e.preventDefault();
		e.stopPropagation();
		$scope.confirm.content = "Delete course ?";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			coursesServices.remove_course({
				course_id: course_id
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$timeout(function() {
						$route.reload();
					}, 2000)
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("signinController", ["$scope", "$rootScope", "$location", "$route", "$window", "$timeout", "facebookServices", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $location, $route, $window, $timeout, facebookServices, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.input = {
		signin_email: "",
		signin_password: "",
		signup_username: "",
		signup_email: "",
		signup_password: "",
		forget_email: "",
	}
	$scope.signin_action = function() {
		toastServices.show();
		userServices.rsa_key().then(function(data) {
			var crypt = new JSEncrypt(),
				private_key = data;
			crypt.setPrivateKey(private_key);
			var crypted_str = crypt.encrypt($scope.input.signin_password);
			$scope.input.signin_password = crypted_str;
		}).then(function(data) {
			toastServices.show();
			userServices.signin({
				email: $scope.input.signin_email,
				password: $scope.input.signin_password
			}).then(function(data) {
				toastServices.hide();
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					localStorageService.set("token", data.token);
					userServices.sync();
					$rootScope.close_popup_signin();
					if ($location.path() != "/fillinorder") {
						$route.reload();
					}
				}
				if (data.code == config.request.SUCCESS && data.status == 5) {
					$scope.reconfirm_signin = true;
					$scope.input.signin_password = "";
					return;
				}
				$scope.input.signin_password = "";
				errorServices.autoHide(data.message);
			})
		})
	}
	$scope.signup_action = function() {
		toastServices.show();
		userServices.signup({
			nickname: $scope.input.username,
			email: $scope.input.signup_email,
			password: $scope.input.signup_password
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message, 5000);
				$timeout(function() {
					$rootScope.close_popup_signin();
				}, 5000);
				return;
			}
			if (data.code == config.request.SUCCESS && data.status == 3) {
				$scope.input.signup_password = "";
				$scope.reconfirm_signup = true;
				return;
			}
			$scope.input.signup_password = "";
			errorServices.autoHide(data.message);
		})
	}
	$scope.forget_action = function() {
		toastServices.show();
		userServices.forget({
			email: $scope.input.forget_email,
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$timeout(function() {
					$rootScope.close_popup_signin();
				}, 1000)
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	$scope.resend_email = function(email) {
		toastServices.show();
		userServices.resend_email({
			email: email
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message, 5000);
				$timeout(function() {
					$scope.reconfirm_signup = false;
					$scope.reconfirm_signin = false;
					$rootScope.close_popup_signin();
				}, 5000);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	// oauth
	$scope.facebook_login = function() {
		if (!$window.FB) return;
		toastServices.show()
		$window.FB && facebookServices.login().then(function(data) {
			toastServices.hide();
			if (!data.email) {
				toastServices.hide();
				errorServices.autoHide("Sorry facebook email address not found, Login failed");
				facebookServices.logout();
				return;
			}
			localStorageService.set("facebook_entry", data);
			toastServices.show();
			userServices.login_by_oauth({
				email: data.email,
				icon_url: data.picture.data.url,
				nickname: data.name
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					localStorageService.set("token", data.token);
					userServices.sync();
					$rootScope.close_popup_signin();
					$route.reload();
				}
				if (data.code == config.request.SUCCESS && (data.status == 2 || data.status == 3)) {
					errorServices.autoHide(data.message)
				}
				if (data.code == config.request.SUCCESS && data.status == 4) {
					$window.location.href = "https://www.skillpier.com/landingFacebook";
					// $window.location.href = "http://localhost:9000/landing_facebook.html";
				}
			})
		});
	}
	$scope.twitter_login = function() {
		$window.location.href = config.url + "/twitterOne";
	}
	$scope.remove_panel = function() {
		$scope.reconfirm_signin = false;
		$scope.reconfirm_signup = false;
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("sidebarController", ["$scope", "$routeParams", "$location", "errorServices", "toastServices", "localStorageService", "config", function($scope, $routeParams, $location, errorServices, toastServices, localStorageService, config) {
	$scope.highlight = function(item) {
		if (item == $location.path() || item == $scope.active) {
			return true;
		}
		return false;
	}
	$scope.go = function(path) {
		$location.path(path);
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("showStepsController", ["$scope", "$routeParams", "$rootScope", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $routeParams, $rootScope, userServices, errorServices, toastServices, localStorageService, config) {
	if (!$routeParams.user_id) {
		$rootScope.back();
		return;
	}
	if ($routeParams.user_id) {
		$scope.user_id = $routeParams.user_id
	}
	toastServices.show();
	userServices.query_steps_by_user_id({
		user_id: $routeParams.user_id
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.steps = data.Result.TaExperiences;
			$scope.steps_message = $scope.steps.length == 0 ? "暂无经历" : "";
		} else {
			errorServices.autoHide(data.message);
		}
	});
	// 用户信息
	toastServices.show();
	userServices.query_basicinfo_id({
		user_id: $routeParams.user_id
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.guest = data.Result.UserInfo
		} else {
			errorServices.autoHide(data.message);
		}
	})
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("showController", ["$scope", "$routeParams", "$rootScope", "user", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $routeParams, $rootScope, user, userServices, errorServices, toastServices, localStorageService, config) {
	if (!$routeParams.user_id) {
		$rootScope.back();
		return;
	}
	if ($routeParams.user_id) {
		$scope.user_id = $routeParams.user_id
	}
	$scope.courses = [];
	$scope.page = {
		pn: 1,
		page_size: 10,
		message: "Load More",
		latitude: "0",
		longitude: "0",
	}
	$scope.loadMore = function() {
		if ($scope.no_more) {
			return;
		}
		toastServices.show();
		$scope.page.message = "loading...";
		$scope.page.user_id = $routeParams.user_id;
		userServices.query_courses_by_user_id($scope.page).then(function(data) {
			toastServices.hide();
			$scope.page.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.courses = $scope.courses.concat(data.Result.Courses.list);
				$scope.no_more = $scope.courses.length == data.Result.Courses.totalRow ? true : false;
			} else {
				errorServices.autoHide("Server error");
			}
			if ($scope.no_more) {
				if ($scope.courses.length == 0) {
					$scope.page.message = "No record found";
				}
				if ($scope.courses.length == 1) {
					$scope.page.message = data.Result.Courses.totalRow + " record found ";
				}
				if ($scope.courses.length > 1) {
					$scope.page.message = data.Result.Courses.totalRow + " records found ";
				}
			}
			$scope.page.pn++;
		})

	};
	$scope.loadMore();
	// 用户信息
	toastServices.show();
	userServices.query_basicinfo_id({
		user_id: $routeParams.user_id
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.guest = data.Result.UserInfo
		} else {
			errorServices.autoHide(data.message);
		}
	})
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("showCommentsController", ["$scope", "$rootScope", "$routeParams", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $routeParams, userServices, errorServices, toastServices, localStorageService, config) {
	if (!$routeParams.user_id) {
		$rootScope.back();
		return;
	}
	if ($routeParams.user_id) {
		$scope.user_id = $routeParams.user_id
	};
	$scope.comments = [];
	$scope.page = {
		pn: 1,
		page_size: 10,
		message: "Load More"
	}
	$scope.loadMore = function() {
		if ($scope.no_more) {
			return;
		}
		toastServices.show();
		$scope.page.message = "loading...";
		$scope.page.user_id = $routeParams.user_id
		userServices.query_comments_by_user_id($scope.page).then(function(data) {
			toastServices.hide();
			$scope.page.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.comments = $scope.comments.concat(data.Result.Comments.list);
				$scope.no_more = $scope.comments.length == data.Result.Comments.totalRow ? true : false;
			} else {
				errorServices.autoHide("Server error");
			}
			if ($scope.no_more) {
				if ($scope.comments.length == 0) {
					$scope.page.message = "No record found";
				}
				if ($scope.comments.length == 1) {
					$scope.page.message = data.Result.Comments.totalRow + " record found ";
				}
				if ($scope.comments.length > 1) {
					$scope.page.message = data.Result.Comments.totalRow + " records found ";
				}
			}
			$scope.page.pn++;
		})

	}
	$scope.loadMore();
	$scope.to_fix = function(m) {
		return m.toFixed(1);
	};
	// 用户信息
	toastServices.show();
	userServices.query_basicinfo_id({
		user_id: $routeParams.user_id
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.guest = data.Result.UserInfo
		} else {
			errorServices.autoHide(data.message);
		}
	})
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("shoppingcartController", ["$scope", "$location", "$window", "$timeout", "$route", "googleMapServices", "orderServices", "shoppingcartServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $location, $window, $timeout, $route, googleMapServices, orderServices, shoppingcartServices, errorServices, toastServices, localStorageService, config) {
	$scope.courses = [];
	$scope.page = {
		pn: 1,
		page_size: 1000,
		message: "Load More"
	}
	$scope.loadMore = function() {
		if ($scope.no_more) {
			return;
		}
		toastServices.show();
		$scope.page.message = "loading...";
		shoppingcartServices.query($scope.page).then(function(data) {
			toastServices.hide();
			$scope.page.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.courses = $scope.courses.concat(data.Result.Carts.list);
				// status 1:正常购物车, status 2:失效购物车;
				// 正常购物车数据
				$scope.normal_courses = $scope.courses.filter(function(c) {
					c.selected = true;
					return c.status == 1;
				});
				// 失效购物车;
				$scope.expired_courses = $scope.courses.filter(function(c) {
					return c.status == 2;
				});
				$scope.page.pn++;
				$scope.no_more = $scope.courses.length == data.Result.Carts.totalRow ? true : false;
			} else {
				errorServices.autoHide("Server error");
			}
			if ($scope.no_more) {
				if ($scope.courses.length == 0) {
					$scope.page.message = "No record found";
				}
				if ($scope.courses.length == 1) {
					$scope.page.message = data.Result.Carts.totalRow + " record found ";
				}
				if ($scope.courses.length > 1) {
					$scope.page.message = data.Result.Carts.totalRow + " records found ";
				}
			}
		})

	}
	$scope.loadMore();
	// action
	$scope.toggle = function(course) {
		return course.selected = !course.selected;
	};
	$scope.check_all = function() {
		// status 1:正常购物车, status 2:失效购物车;
		if ($scope.shoppingcart_size == $scope.normal_courses.length) {
			$scope.normal_courses.map(function(c) {
				c.selected = false
				return c;
			});
			return;
		}
		$scope.normal_courses.map(function(c) {
			c.selected = true
			return c;
		});
	};
	$scope.get_total = function() {
		var total = 0;
		$scope.shoppingcart_size = 0;
		angular.forEach($scope.normal_courses, function(value, key) {
			if (value.selected) {
				$scope.shoppingcart_size++;
				total += value.total_session_rate
			}
		});
		return total.toFixed(2);
	};
	// 支付
	$scope.pay = function() {
		var ids = $scope.normal_courses.filter(function(c) {
			return c.selected
		}).map(function(course) {
			return course.orders_id;
		}).join("A");
		if (!ids) {
			errorServices.autoHide("No selected course")
			return;
		}
		var url = $location.protocol() + "://" + $location.host() + ":" + $location.port() + "/#/payment?id=" + ids;
		$window.location.href = url;
	};
	// 删除购物车
	$scope.remove = function(course) {
		$scope.confirm.content = "Delete course ?";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			orderServices.remove({
				delete_type: "1",
				orders_ids: course.orders_id
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$timeout(function() {
						$route.reload();
					}, 2000)
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	};
	$scope.remove_expired = function() {
		var expired_ids = $scope.courses.filter(function(c) {
			return c.status == '2';
		}).map(function(expired) {
			return expired.orders_id;
		}).join("#");
		toastServices.show();
		orderServices.remove({
			delete_type: "1",
			orders_ids: expired_ids
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$timeout(function() {
					$route.reload();
				}, 2000)
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	// Course location
	$scope.open_map = function(course, e) {
		e.preventDefault();
		e.stopPropagation();
		$.magnificPopup.open({
			items: {
				// src: "https://maps.google.com/maps?q=" + course.city + course.area + course.street
				src: "<div style='height:500px;width:80%;max-width:800px;margin:auto auto;border:1px solid #d2d2d2;background-color:white' id='map'></div>"
			},
			type: "inline"
		});
		$timeout(function() {
			googleMapServices.geocoding({
				address: course.street + "," + course.area + "," + course.city
			}).then(function(data) {
				$scope.lat_lng = data.results[0].geometry.location;
				var map = googleMapServices.create_map(document.getElementById('map'), $scope.lat_lng);
				// console.log(map)
				var circle_marker = googleMapServices.create_circle_marker(map, $scope.lat_lng);
			})
		}, 0)
	};
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("servicesController", ["$scope", "errorServices", "toastServices", "localStorageService", "config", function($scope, errorServices, toastServices, localStorageService, config) {

}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("searchFormController", ["$scope", "$timeout", "$routeParams", "$location", "googleMapServices", "skillopediaServices", "filterFilter", "errorServices", "toastServices", "localStorageService", "config", function($scope, $timeout, $routeParams, $location, googleMapServices, skillopediaServices, filterFilter, errorServices, toastServices, localStorageService, config) {
	$scope.input = {
		keyword: "",
		zipcode: "",
		suggestions: []
	}
	$scope.input.keyword = $routeParams.keyword || "";
	if ($routeParams.location) {
		$scope.input.location = JSON.parse($routeParams.location);
	}
	var suggestions = [],
		categorys = [];
	// query category list;
	skillopediaServices.query_all_second_category().then(function(data) {
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			categorys = data.Result.Categorys;
		} else {
			errorServices.autoHide(data.message);
		}
	});
	$scope.select = function(s) {
		$scope.input.zipcode = s.zipcode;
		$timeout(function() {
			$scope.input.suggestions = [];
		}, 100)
	}
	$scope.$watch("input.keyword", function(n, o) {
		$scope.input.categorys = filterFilter(categorys, n);
		if ($scope.input.categorys.length == 0) {
			$scope.input.categorys = categorys;
		}
	});
	$scope.focus = function() {
		$scope.input.categorys = categorys;
		$scope.input.focus = true;
	};
	$scope.blur = function() {
		$timeout(function() {
			$scope.input.focus = false;
		}, 350)
	};
	$scope.select_category = function(c) {
		$scope.input.keyword = c.category_02_name;
		$timeout(function() {
			$scope.input.categorys = [];
		}, 100)
	}
	$scope.ajaxForm = function() {
		// var address = $("#autocomplete").val();
		if (localStorageService.get("cache_category")) {
			$scope.input.keyword = localStorageService.get("cache_category").name;
		}
		localStorageService.remove("cache_category");
		var address = "";
		if ($scope.input.location.street) {
			address += $scope.input.location.street + ", ";
		}
		if ($scope.input.location.city) {
			address += $scope.input.location.city + ", ";
		}
		if ($scope.input.location.state) {
			address += $scope.input.location.state + ", ";
		}
		if ($scope.input.location.zipcode) {
			address += $scope.input.location.zipcode + ", ";
		}
		address = address.substring(0, address.length - 2);
		if (!address) {
			$scope.confirm.title = "";
			$scope.confirm.content_text = "Please tell us your location so we can introduce coaches fit you";
			$scope.confirm.content_type = "autocomplete";
			$scope.confirm.ok_text = "Use this location";
			$scope.confirm.cancel_text = "Skip and search";
			$scope.confirm.open();
			$scope.confirm.cancle_callback = function() {
				$location.path("search").search({
					keyword: $scope.input.keyword,
					zipcode: address,
					location: JSON.stringify($scope.input.location)
				});
			}
			$scope.confirm.ok_callback = function() {
				$scope.input.location = $scope.confirm.location;
				$scope.search($scope.confirm.content)
			}
			return;
		}
		$scope.search(address);
	}
	$scope.search = function(address) {
		toastServices.show();
		googleMapServices.code_address(address).then(function(data) {
			toastServices.hide();
			$location.path("search").search({
				keyword: $scope.input.keyword,
				zipcode: address,
				location: JSON.stringify($scope.input.location),
				lat: data.lat,
				lng: data.lng,
			});
		})
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("searchController", ["$scope", "$rootScope", "$routeParams", "$location", "$timeout", "googleMapServices", "skillopediaServices", "coursesServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $routeParams, $location, $timeout, googleMapServices, skillopediaServices, coursesServices, errorServices, toastServices, localStorageService, config) {
	$scope.input = {
		distances: [
			"500-1000mile",
			"1000-1500mile",
			"1500-2000mile",
			"2000-2500mile",
			"2500-3000mile"
		],
		priorities: [
			// "distance",
			"price",
			"review",
			"hot",
		],
		price: 0,
		review: 0,
		hot: 0,
	};
	$scope.input.category = {
		name: $routeParams.category,
		id: $routeParams.category_id || "0"
	};
	// query category list;
	skillopediaServices.query_all_second_category().then(function(data) {
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.categorys = data.Result.Categorys;
		} else {
			errorServices.autoHide(data.message);
		}
	});
	// query course list;
	$scope.courses = [];
	// $scope.page = {
	// 	pn: 1,
	// 	page_size: 10,
	// 	message: "Load More",
	// 	kw: $routeParams.keyword,
	// 	zipcode: $routeParams.zipcode,
	// 	latitude: $routeParams.lat || "0",
	// 	longitude: $routeParams.lng || "0",
	// 	category_02_id: $scope.input.category.id,
	// 	category_02_name: $scope.input.category.name,
	// 	distances: $scope.input.distance,
	// 	prioritys: $scope.input.priority,
	// 	session_rate: $scope.input.session_rate,
	// 	result: ""
	// }
	$scope.paging = {
		pn: 1,
		page_size: 10,
		message: "Load More",
		kw: $routeParams.keyword,
		zipcode: $routeParams.zipcode,
		latitude: $routeParams.lat || "0",
		longitude: $routeParams.lng || "0",
		type: $routeParams.type,
		category_02_id: $scope.input.category.id,
		category_02_name: $scope.input.category.name,
		distances: $scope.input.distance,
		prioritys: $scope.input.priority,
		session_rate: $scope.input.session_rate,
		result: ""
	}
	$scope.loadMore = function() {
		// if ($scope.no_more) {
		// 	return;
		// }
		// toastServices.show();
		// $scope.page.message = "loading...";
		// coursesServices.search_by_keyword($scope.page).then(function(data) {
		// 	toastServices.hide();
		// 	$scope.page.message = "Load More";
		// 	if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
		// 		$scope.courses = $scope.courses.concat(data.Result.Courses.list);
		// 		$scope.no_more = $scope.courses.length == data.Result.Courses.totalRow ? true : false;
		// 		if ($scope.courses.length == 0) {
		// 			$scope.page.result = "No record found in this area";
		// 		}
		// 		if ($scope.courses.length == 1) {
		// 			$scope.page.result = data.Result.Courses.totalRow + " record found";
		// 		}
		// 		if ($scope.courses.length > 1) {
		// 			$scope.page.result = data.Result.Courses.totalRow + " records found";
		// 		}
		// 	} else {
		// 		errorServices.autoHide("Server error");
		// 	}
		// 	if ($scope.no_more) {
		// 		if ($scope.courses.length == 0) {
		// 			$scope.page.message = "No record found";
		// 		}
		// 		if ($scope.courses.length == 1) {
		// 			$scope.page.message = data.Result.Courses.totalRow + " record found ";
		// 		}
		// 		if ($scope.courses.length > 1) {
		// 			$scope.page.message = data.Result.Courses.totalRow + " records found ";
		// 		}
		// 	}
		// 	$scope.page.pn++;
		// })
		toastServices.show();
		$scope.paging.message = "loading...";
		coursesServices.search_by_keyword($scope.paging).then(function(data) {
			toastServices.hide();
			$scope.paging.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.courses = data.Result.Courses.list;
				$scope.paging.page_size = $scope.paging.page_size;
				$scope.paging.total_items = data.Result.Courses.totalRow;
				if ($scope.courses.length == 0) {
					$scope.paging.result = "No record found in this area";
				}
				if ($scope.courses.length == 1) {
					$scope.paging.result = data.Result.Courses.totalRow + " record found";
				}
				if ($scope.courses.length > 1) {
					$scope.paging.result = data.Result.Courses.totalRow + " records found";
				}
			} else {
				errorServices.autoHide("Server error");
			}
		})

	}
	$scope.loadMore();
	// reload course;
	$scope.reload = function() {
		// $scope.courses = [];
		// $scope.page = {
		// 	pn: 1,
		// 	page_size: 10,
		// 	message: "Load More",
		// 	kw: $routeParams.keyword,
		// 	zipcode: $routeParams.zipcode,
		// 	latitude: $routeParams.lat || "0",
		// 	longitude: $routeParams.lng || "0",
		// 	category_02_id: $scope.input.category.id,
		// 	category_02_name: $scope.input.category.name,
		// 	distances: $scope.input.distance,
		// 	prioritys: $scope.input.priority,
		// 	session_rate: $scope.input.session_rate
		// }
		// $scope.no_more = false;
		$scope.paging = angular.extend({}, $scope.paging, {
			pn: $scope.paging.pn,
			page_size: $scope.paging.page_size,
			message: "Load More",
			kw: $routeParams.keyword,
			type: "2",
			zipcode: $routeParams.zipcode,
			latitude: $routeParams.lat || "0",
			longitude: $routeParams.lng || "0",
			category_02_id: $scope.input.category.id,
			category_02_name: $scope.input.category.name,
			distances: $scope.input.distance,
			prioritys: $scope.input.priority,
			price_type: $scope.input.price,
			review_type: $scope.input.review,
			hot_type: $scope.input.hot,
			travel_to_session: $scope.input.travel != 1 ? "" : $scope.input.travel,
			session_rate: $scope.input.session_rate
		})
		$scope.loadMore();
	};
	$scope.paging.callback = function() {
		$scope.reload();
	};
	// filter by category;
	$scope.$watch("input.category", function(n, o) {
		if (n === o) {
			return;
		}
		$scope.paging.pn = 1;
		$scope.reload();
	}, true);
	$scope.$watch("input.priority", function(n, o) {
		if (n === o) {
			return;
		}
		$scope.paging.pn = 1;
		$scope.reload();
	}, true);
	// filter by priority;
	$scope.remove = function(condition) {
		$scope.input[condition] = "";
	}
	$scope.price_callback = function(position, value) {
		$scope.input.session_rate = value;
		$timeout(function() {
			$scope.reload();
		}, 100)
	}
	$scope.distance_callback = function(position, value) {
		$scope.input.distance = value;
		$timeout(function() {
			$scope.reload();
		}, 100)
	};
	var sort_1 = sort_2 = sort_3 = 0;
	$scope.sort_by_price = function() {
		$scope.input.review = sort_2 = 0;
		$scope.input.hot = sort_3 = 0;
		$scope.input.price = sort_1++ % 2 + 1;
		$scope.paging.pn = 1;
		$scope.reload();
	};
	$scope.sort_by_review = function() {
		$scope.input.price = sort_1 = 0;
		$scope.input.hot = sort_3 = 0;
		$scope.input.review = sort_2++ % 2 + 1;
		$scope.paging.pn = 1;
		$scope.reload();
	};
	$scope.sort_by_hot = function() {
		$scope.input.price = sort_1 = 0;
		$scope.input.review = sort_2 = 0;
		$scope.input.hot = sort_3++ % 2 + 1;
		$scope.paging.pn = 1;
		$scope.reload();
	};
	$scope.input.travel = 0;
	$scope.travel = function() {
		if ($scope.input.travel == 0) {
			$scope.input.travel = 1;
		} else {
			$scope.input.travel = 0;
		}
		$scope.paging.pn = 1;
		$scope.reload();
	};
	$scope.open_map = function(course, e) {
		e.preventDefault();
		e.stopPropagation();
		$.magnificPopup.open({
			items: {
				// src: "https://maps.google.com/maps?q=" + course.city + course.area + course.street
				src: "<div style='height:500px;width:80%;max-width:800px;margin:auto auto;border:1px solid #d2d2d2;background-color:white' id='map'></div>"
			},
			type: "inline"
		});
		$timeout(function() {
			googleMapServices.geocoding({
				address: course.street + "," + course.area + "," + course.city
			}).then(function(data) {
				$scope.lat_lng = data.results[0].geometry.location;
				var map = googleMapServices.create_map(document.getElementById('map'), $scope.lat_lng);
				// console.log(map)
				var circle_marker = googleMapServices.create_circle_marker(map, $scope.lat_lng);
			})
		}, 0)
	};
	// go to detail
	$scope.local_go = function(id) {
		$location.path("detail").search({
			category: null,
			cagegory_id: null,
			course_id: id
		});
	};
	// recommand and hot
	// toastServices.show();
	// skillopediaServices.query_recommand_category().then(function(data) {
	// 	toastServices.hide()
	// 	if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
	// 		$scope.recommands = data.Result.Catetorys;
	// 	} else {
	// 		errorServices.autoHide(data.message);
	// 	}
	// })
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("scheduleController", ["$scope", "$rootScope", "$filter", "scheduleServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $filter, scheduleServices, errorServices, toastServices, localStorageService, config) {
	$scope.calendar = {
		mode: "preview",
		disabled: false,
		disabled_message: "All Day Busy",
		times: []
	}
	$scope.query_schedule = function(day) {
		$scope.calendar.selected = [];
		toastServices.show();
		scheduleServices.query({
			user_id: $rootScope.user.user_id,
			choice_currentdate: day,
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.calendar.times = data.ScheduleBeans.map(function(time) {
					time.schedule_state = time.schedule_state;
					time.schedule_state_message = time.schedule_state_message;
					return time;
				})
				$scope.calendar.is_stop_course = data.is_stop_course;
				$scope.calendar.is_busy_24 = data.is_busy_24;
				if ($scope.calendar.is_stop_course == "1" || $scope.calendar.is_busy_24 == "1") {
					$scope.calendar.disabled = true;
				} else {
					$scope.calendar.disabled = false;
				}
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
	$scope.busy_hour = function() {
		$scope.confirm.content = "";
		$scope.confirm.content_type = "input"
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			scheduleServices.set_busy({
				choice_currentdate: $filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"),
				time_slots: $scope.calendar.selected.map(function(t) {
					return t.hour_index
				}).join("#"),
				remarks: $scope.confirm.content
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$scope.query_schedule($filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"))
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	}
	$scope.free_hour = function() {
		toastServices.show();
		scheduleServices.set_free({
			choice_currentdate: $filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"),
			time_slots: $scope.calendar.selected.map(function(t) {
				return t.hour_index;
			}).join("#")
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$scope.query_schedule($filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"))
			} else {
				errorServices.autoHide(data.message);
			}
		});
	}
	$scope.busy_one_day = function() {
		$scope.confirm.content = $scope.calendar.is_busy_24 == "0" ? "Mark busy today?" : "Cancel Mark busy today?";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			var is_busy_24 = $scope.calendar.is_busy_24 == "0" ? "1" : 0;
			toastServices.show();
			scheduleServices.set_one_day_busy({
				choice_currentdate: $filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"),
				is_busy_24: is_busy_24
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$scope.query_schedule($filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"))
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	}
	$scope.busy_all_day = function() {
		$scope.confirm.content = $scope.calendar.is_stop_course == "0" ? "Suspend all courses" : "Start up courses";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			var is_stop_course = $scope.calendar.is_stop_course == "0" ? "1" : 0;
			toastServices.show();
			scheduleServices.set_all_day_busy({
				is_stop_course: is_stop_course
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$scope.query_schedule($filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"))
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	}
	$scope.query_schedule($filter("date")(new Date().getTime(), "yyyy-MM-dd"));
	$scope.calendar.onDayChange = function() {
		$scope.query_schedule($filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"))
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("refundPolicyController", ["$scope", "errorServices", "toastServices", "localStorageService", "config", function($scope, errorServices, toastServices, localStorageService, config) {

}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("privacyController", ["$scope", "errorServices", "toastServices", "localStorageService", "config", function($scope, errorServices, toastServices, localStorageService, config) {

}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("paymentController", ["$scope", "$routeParams", "skillopediaServices", "$timeout", "$location", "orderServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $routeParams, skillopediaServices, $timeout, $location, orderServices, errorServices, toastServices, localStorageService, config) {
	if (!$routeParams.id) {
		rediect();
		return;
	}
	$scope.is_billing = false;
	$scope.select_payment = function(pay_with) {
		$scope.pay_with = pay_with;
	}
	$scope.input = {
		last_time: new Date().getTime()
	};
	if (localStorageService.get("billing_address")) {
		// 缓存2分钟
		if (new Date().getTime() - localStorageService.get("billing_address").last_time > 120000) {
			localStorageService.remove("billing_address");
		} else {
			$scope.input = angular.extend({}, $scope.input, localStorageService.get("billing_address"));
		}
	}
	$scope.last_step = function() {
		$scope.is_billing = false;
	}
	$scope.id = new Date().getTime() + $routeParams.id;
	toastServices.show();
	orderServices.query_payment({
		orders_ids: $routeParams.id
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			if (data.total_total_session_rate == 0) {
				rediect();
			} else {
				$scope.payment = data;
			}
		} else {
			errorServices.autoHide(data.message);
		}
	});
	toastServices.show();
	skillopediaServices.query_us_state().then(function(data) {
		toastServices.hide()
		$scope.states = data.state;
		$scope.input.state = $scope.states[0].name;
	})
	$scope.pay = function(by) {
		toastServices.show();
		orderServices.pay({
			total_money: $scope.payment.total_total_session_rate,
			orders_ids: $routeParams.id,
			pay_type: by
		}).then(function(data) {
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {

				$scope.alipay = data.sParaTemp;
				$timeout(function() {
					toastServices.hide()
					angular.element("#alipayForm").submit();
				}, 1000)
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	$scope.pay_by_paypal = function() {
		angular.element("#paypalForm").submit();
	}

	function rediect() {
		$scope.error_msg = "page not found";
		$timeout(function() {
			$location.path("index").search("id", null).replace();
		}, 2000)
	}
	$scope.ajaxBilling = function() {
		localStorageService.set("billing_address", $scope.input);
		toastServices.show();
		orderServices.post_billing_address({
			first_name: $scope.input.first_name,
			last_name: $scope.input.last_name,
			street: $scope.input.street,
			city_town: $scope.input.city,
			state: $scope.input.state,
			zip_code: $scope.input.zipcode,
			phone: $scope.input.phone,
			orders_ids: $routeParams.id,
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.is_billing = true;
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
	$scope.ajaxForm = function() {
		toastServices.show();
		orderServices.pay_by_visa({
			amount: $scope.payment.total_total_session_rate,
			orders_ids: $routeParams.id,
			cardNumber: $scope.input.visa_card_id,
			expirationDate: $scope.input.visa_card_month.toString() + $scope.input.visa_card_year.toString(),
			code: $scope.input.visa_card_code,
			// first_name: $scope.input.first_name,
			// last_name: $scope.input.last_name,
			// street: $scope.input.street,
			// city: $scope.input.city,
			// state: $scope.input.state,
			// phone: $scope.input.phone,
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$timeout(function() {
					$location.path("orders").replace();
				}, 3000);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("ordersManagementController", ["$scope", "$rootScope", "$route", "$window", "$timeout", "$location", "userServices", "googleMapServices", "orderServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $route, $window, $timeout, $location, userServices, googleMapServices, orderServices, errorServices, toastServices, localStorageService, config) {
	if ($rootScope.user.agent_level != "2") {
		$location.path("authenication").replace();
		return;
	}
	$scope.input = {
		order_type: '1'
	}
	$scope.orders = [];
	$scope.page = {
		pn: 1,
		page_size: 10,
		message: "Load More",
		latitude: "0",
		longitude: "0",
		order_type: $scope.input.order_type
	}
	$scope.loadMore = function() {
		if ($scope.no_more) {
			return;
		}
		toastServices.show();
		$scope.page.message = "loading...";
		orderServices.query_manage_orders($scope.page).then(function(data) {
			toastServices.hide();
			$scope.page.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.orders = $scope.orders.concat(data.Result.CoachOrderList.list);
				$scope.no_more = $scope.orders.length == data.Result.CoachOrderList.totalRow ? true : false;
				$rootScope.user.booking_number > 0 && userServices.sync();
			} else {
				errorServices.autoHide("Server error");
			}
			if ($scope.no_more) {
				if ($scope.orders.length == 0) {
					$scope.page.message = "No record found";
				}
				if ($scope.orders.length == 1) {
					$scope.page.message = data.Result.CoachOrderList.totalRow + " record found ";
				}
				if ($scope.orders.length > 1) {
					$scope.page.message = data.Result.CoachOrderList.totalRow + " records found ";
				}
			}
			$scope.page.pn++;
		})

	}
	$scope.loadMore();
	$scope.active_tab = function(tab_index) {
		if (tab_index == $scope.input.order_type) {
			return;
		}
		$scope.input.order_type = tab_index;
		$scope.orders = [];
		$scope.page = {
			pn: 1,
			page_size: 10,
			message: "Load More",
			latitude: "0",
			longitude: "0",
			order_type: $scope.input.order_type
		}
		$scope.no_more = false;
		$scope.loadMore();
	};
	// 查看地图
	$scope.open_map = function(course, e) {
		e.preventDefault();
		e.stopPropagation();
		$.magnificPopup.open({
			items: {
				// src: "https://maps.google.com/maps?q=" + course.city + course.area + course.street
				src: "<div style='height:500px;width:80%;max-width:800px;margin:auto auto;border:1px solid #d2d2d2;background-color:white' id='map'></div>"
			},
			type: "inline"
		});
		$timeout(function() {
			googleMapServices.geocoding({
				address: course.street + "," + course.area + "," + course.city
			}).then(function(data) {
				$scope.lat_lng = data.results[0].geometry.location;
				var map = googleMapServices.create_map(document.getElementById('map'), $scope.lat_lng);
				// console.log(map)
				var circle_marker = googleMapServices.create_circle_marker(map, $scope.lat_lng);
			})
		}, 0)
	};
	// 获取状态字
	$scope.get_status_message = function(status) {
		var status_message = {
			"2": "expired",
			"10": "expired",
			"11": "Unpay",
			"21": "Payed",
			"22": "Payed",
			"30": "Finish",
			"40": "Finish"
		}
		return status_message[status];
	};
	// remove order
	$scope.remove = function(order) {
		$scope.confirm.content = "Delete order ?";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			orderServices.remove({
				delete_type: "1",
				orders_ids: order.orders_id
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$timeout(function() {
						$route.reload();
					}, 2000)
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	};
	// pay order
	$scope.pay = function(order) {
		var url = $location.protocol() + "://" + $location.host() + ":" + $location.port() + "/#/payment?id=" + order.orders_id;
		$window.location.href = url;
	};
	$scope.local_go = function(id) {
		$location.path("order_management").search("id", id)
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("ordersController", ["$scope", "$route", "$window", "$timeout", "googleMapServices", "$location", "orderServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $route, $window, $timeout, googleMapServices, $location, orderServices, errorServices, toastServices, localStorageService, config) {
	$scope.input = {
		order_type: '1'
	}
	$scope.orders = [];
	$scope.page = {
		pn: 1,
		page_size: 10,
		message: "Load More",
		latitude: "0",
		longitude: "0",
		order_type: $scope.input.order_type
	}
	$scope.loadMore = function() {
		if ($scope.no_more) {
			return;
		}
		toastServices.show();
		$scope.page.message = "loading...";
		orderServices.query($scope.page).then(function(data) {
			toastServices.hide();
			$scope.page.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.orders = $scope.orders.concat(data.Result.OrderList.list);
				$scope.no_more = $scope.orders.length == data.Result.OrderList.totalRow ? true : false;
			} else {
				errorServices.autoHide("Server error");
			}
			if ($scope.no_more) {
				if ($scope.orders.length == 0) {
					$scope.page.message = "No record found";
				}
				if ($scope.orders.length == 1) {
					$scope.page.message = data.Result.OrderList.totalRow + " record found ";
				}
				if ($scope.orders.length > 1) {
					$scope.page.message = data.Result.OrderList.totalRow + " records found ";
				}
			}
			$scope.page.pn++;
		})

	}
	$scope.loadMore();
	$scope.active_tab = function(tab_index) {
		if (tab_index == $scope.input.order_type) {
			return;
		}
		$scope.input.order_type = tab_index;
		$scope.orders = [];
		$scope.page = {
			pn: 1,
			page_size: 10,
			message: "Load More",
			latitude: "0",
			longitude: "0",
			order_type: $scope.input.order_type
		}
		$scope.no_more = false;
		$scope.loadMore();
	};
	// 查看地图
	$scope.open_map = function(course, e) {
		e.preventDefault();
		e.stopPropagation();
		$.magnificPopup.open({
			items: {
				// src: "https://maps.google.com/maps?q=" + course.city + course.area + course.street
				src: "<div style='height:500px;width:80%;max-width:800px;margin:auto auto;border:1px solid #d2d2d2;background-color:white' id='map'></div>"
			},
			type: "inline"
		});
		$timeout(function() {
			googleMapServices.geocoding({
				address: course.street + "," + course.area + "," + course.city
			}).then(function(data) {
				$scope.lat_lng = data.results[0].geometry.location;
				var map = googleMapServices.create_map(document.getElementById('map'), $scope.lat_lng);
				// console.log(map)
				var circle_marker = googleMapServices.create_circle_marker(map, $scope.lat_lng);
			})
		}, 0)
	};
	// 获取状态字
	$scope.get_status_message = function(status) {
		var status_message = {
			"2": "expired",
			"10": "expired",
			"11": "Unpay",
			"21": "Payed",
			"22": "Payed",
			"30": "Finish",
			"40": "Finish"
		}
		return status_message[status];
	};
	// remove order
	$scope.remove = function(order) {
		$scope.confirm.content = "Delete order ?";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			orderServices.remove({
				delete_type: "1",
				orders_ids: order.orders_id
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$timeout(function() {
						$route.reload();
					}, 2000)
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	};
	// pay order
	$scope.pay = function(order) {
		var url = $location.protocol() + "://" + $location.host() + ":" + $location.port() + "/#/payment?id=" + order.orders_id;
		$window.location.href = url;
	};
	$scope.local_go = function(order) {
		if (order.status == '10') {
			$location.path("detail").search("course_id", order.course_id)
		} else {
			$location.path("order").search("id", order.orders_id)
		}
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("orderRefundController", ["$scope", "$rootScope", "$routeParams", "$route", "$timeout", "orderServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $routeParams, $route, $timeout, orderServices, errorServices, toastServices, localStorageService, config) {
	toastServices.show();
	orderServices.query_refund({
		orders_id: $routeParams.id
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.refund_meta = data;
			$scope.refunds = data.Result.Refunds;
			$scope.order = data.Result.Orders;
			$scope.refunds.map(function(r) {
				if (r.refund_status == '10') {
					r.selected = false;
				}
				return r;
			});
			if ($scope.refund_meta.can_refund_num == 0) {
				$rootScope.back();
			}
			$scope.calculate();
		} else {
			errorServices.autoHide(data.message);
		}
	});
	// 选择退款
	$scope.select = function(refund) {
		refund.selected = !refund.selected;
		$scope.calculate();

	};
	// 计算退款
	// ---------用户退款
	// 总退金额 = 实付金额-服务费-（未退款课程数*原单价）
	// 未退款课程 = 总课程 - 已经选择要退款的课程
	// 原单价 = 原单价+外出+additional partner
	// ---------教练退款
	// 支付总额-（支付总额 / 总课程数  *退款课程数）
	$scope.calculate = function() {
		$scope.total_refund_money = 0;
		$scope.total_refund_money = parseFloat($scope.order.total_session_rate) - parseFloat($scope.order.first_joint_fee) - parseFloat($scope.query_amount() * $scope.query_single());
		$scope.total_refund_money = $scope.total_refund_money < 0 ? 0 : $scope.total_refund_money;
	};
	// 未退款课程数
	$scope.query_amount = function() {
		var to_refund_amount = $scope.refunds.filter(function(refund) {
			return refund.selected;
		}).length;
		return (parseFloat($scope.order.buy_amount) - parseFloat(to_refund_amount))
	};
	// 退款单价 原单价+交通费+addtional
	$scope.query_single = function() {
		return (parseFloat($scope.order.session_rate) + parseFloat($scope.order.go_door_traffic_cost) + parseFloat($scope.order.surcharge_for_each_cash) * parseFloat($scope.order.take_partner_num))
	};
	// 发起退款
	$scope.refund = function() {
		toastServices.show();
		orderServices.refund({
			orders_id: $scope.order.orders_id,
			orders_schedule_ids: $scope.refunds.filter(function(refund) {
				return refund.selected;
			}).map(function(r) {
				return r.orders_schedule_id
			}).join("#"),
			refund_success_money: $scope.total_refund_money
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$timeout(function() {
					$route.reload()
				}, 1000)
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("orderManagementController", ["$scope", "$sce", "$routeParams", "googleMapServices", "orderServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $sce, $routeParams, googleMapServices, orderServices, errorServices, toastServices, localStorageService, config) {
	toastServices.show();
	orderServices.query_manage_order({
		orders_id: $routeParams.id,
		latitude: "0",
		longitude: "0"
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.order = data.Orders;
			$scope.get_map();
		} else {
			errorServices.autoHide(data.message);
		}
	});
	// parse iframe map url
	$scope.get_map = function() {
		googleMapServices.geocoding({
			address: $scope.order.Course.street + "," + $scope.order.Course.address + "," + $scope.order.Course.area + "," + $scope.order.Course.city
		}).then(function(data) {
			$scope.lat_lng = data.results[0].geometry.location;
			$scope.format_address = data.results[0].formatted_address;
			var map = googleMapServices.create_map(document.getElementById('map'), $scope.lat_lng);
			// console.log(map)
			var circle_marker = googleMapServices.create_marker(map, $scope.lat_lng);
		});
		// var map_url = "https://maps.google.com/maps?q=" + $scope.order.Course.city + $scope.order.Course.area + $scope.order.Course.street + $scope.order.Course.address + "&output=embed";
		// return $sce.trustAsResourceUrl(map_url);
	};
	$scope.get_total_partner_fee = function() {
		if (!$scope.order) {
			return;
		}
		return (parseFloat($scope.order.take_partner_num) * parseFloat($scope.order.surcharge_for_each_cash)).toFixed(2);
	};
	// remove order
	$scope.remove = function(order) {
		$scope.confirm.content = "Delete order ?";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			orderServices.remove({
				delete_type: "1",
				orders_ids: order.orders_id
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$timeout(function() {
						$rootScope.back();
					}, 2000)
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	};
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("orderFinishController", ["$scope", "$timeout", "$rootScope", "$routeParams", "orderServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $timeout, $rootScope, $routeParams, orderServices, errorServices, toastServices, localStorageService, config) {
	if (!$routeParams.id) {
		$rootScope.back()
		return;
	}
	toastServices.show();
	orderServices.query_schedule_date({
		orders_id: $routeParams.id,
		schedule_type: "3"
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.days = data.scheduleDatas;
			return true;
		} else {
			errorServices.autoHide(data.message);
			$timeout(function() {
				$rootScope.back();
			}, 2000)
			return false;
		}
	}).then(function(promise) {
		if (!promise) {
			return;
		}
		$scope.current_day = $scope.days[0].schedule_data;
		$scope.query_schedule($scope.current_day)
	})
	$scope.calendar = {
		mode: "confirm",
		disabled: false,
		disabled_message: "All Day Busy",
		times: [],
		size: 0
	}
	$scope.query_schedule = function(day) {
		// $scope.calendar.selected = null;
		// var selected = $scope.calendar.selected.map(function(t) {
		// 	return t.from.day + " " + t.from.hour + "to" + t.to.day + " " + t.to.hour;
		// }).join("#");
		$scope.current_day = day;
		toastServices.show();
		orderServices.query_schedule_time({
			orders_id: $routeParams.id,
			schedule_type: "1",
			schedule_data: day
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.calendar.times = data.ScheduleBeans.map(function(time) {
					time.schedule_state = time.schedule_state;
					time.schedule_state_message = time.schedule_state_message;
					time.day = day;
					// var temp = time.day + " " + time.hour;
					// if (selected.indexOf(temp) != -1) {
					// 	time.schedule_state = 2;
					// 	time.active = true;
					// }
					if (time.schedule_state == 3) {
						time.schedule_state = 2;
						time.active = true;
						$scope.calendar.size = parseFloat($scope.calendar.size) + 0.5;
					}
					return time;
				})
				$scope.calendar.is_stop_course = data.is_stop_course;
				$scope.calendar.is_busy_24 = data.is_busy_24;
				if ($scope.calendar.is_stop_course == "1" || $scope.calendar.is_busy_24 == "1") {
					$scope.calendar.disabled = true;
				} else {
					$scope.calendar.disabled = false;
				}
				parse_selected();
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	$scope.get_from_time = function(t) {
		return t.split("-")[0]
	}
	$scope.get_to_time = function(t) {
		return t.split("-")[1]
	};

	function parse_selected() {
		$scope.calendar.selected = [];
		$scope.calendar.default_selected = [];
		var selectabled = $scope.calendar.times.filter(function(t) {
			return t.active;
		})
		for (var i = 0; i < selectabled.length; i = i + 2) {

			var selected_time = {
				from: selectabled[i],
				to: selectabled[i + 1]
			}
			$scope.calendar.selected.push(selected_time);
			$scope.calendar.default_selected.push(selected_time);
		}
	}
	$scope.input = {};
	// confirm
	$scope.confirm_course = function() {
		$scope.confirm.content = "确定课程已经完成？";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			orderServices.finish({
				// schedule_type: "2",
				// refund_reason: $scope.input.refund_reason,
				orders_schedule_ids: $scope.calendar.selected.map(function(c) {
					return c.from.orders_schedule_id
				}).join("#")
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	};
	// reject
	$scope.reject_course = function() {
		$scope.confirm.content = "Decline Booking";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			console.log("reject")
		}
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("orderController", ["$scope", "$sce", "$rootScope", "$timeout", "$routeParams", "$location", "$window", "googleMapServices", "orderServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $sce, $rootScope, $timeout, $routeParams, $location, $window, googleMapServices, orderServices, errorServices, toastServices, localStorageService, config) {
	if (!$routeParams.id) {
		$rootScope.back();
		return;
	}
	toastServices.show();
	orderServices.query_by_id({
		orders_id: $routeParams.id,
		latitude: "0",
		longitude: "0"
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.order = data.Orders;
			$scope.get_map();
		} else {
			errorServices.autoHide(data.message);
		}
	});
	// parse iframe map url
	$scope.get_map = function() {
		// if (!$scope.course.city) {
		// 	return;
		// }
		// var map_url = "https://maps.google.com/maps?q=" + $scope.course.city + " " + $scope.course.area + " " + $scope.course.street + "&output=embed";
		// return $sce.trustAsResourceUrl(map_url);
		googleMapServices.geocoding({
			address: $scope.order.Course.street + " " + $scope.order.Course.address + "," + $scope.order.Course.area + "," + $scope.order.Course.city
		}).then(function(data) {
			$scope.format_address = data.results[0].formatted_address;
			$scope.lat_lng = data.results[0].geometry.location;
			var map = googleMapServices.create_map(document.getElementById('map'), $scope.lat_lng);
			// console.log(map)
			var circle_marker = googleMapServices.create_marker(map, $scope.lat_lng);
		})
	};
	// $scope.get_map = function() {
	// 	if (!$scope.order) {
	// 		return;
	// 	}
	// 	var map_url = "https://maps.google.com/maps?q=" + $scope.order.Course.city + $scope.order.Course.area + $scope.order.Course.street + $scope.order.Course.address + "&output=embed";
	// 	return $sce.trustAsResourceUrl(map_url);
	// };
	$scope.get_total_partner_fee = function() {
		if (!$scope.order) {
			return;
		}
		return (parseFloat($scope.order.take_partner_num) * parseFloat($scope.order.surcharge_for_each_cash)).toFixed(2);
	};
	// remove order
	$scope.remove = function(order) {
		$scope.confirm.content = "Delete order ?";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			orderServices.remove({
				delete_type: "1",
				orders_ids: order.orders_id
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$timeout(function() {
						$rootScope.back();
					}, 2000)
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	};
	// pay order
	$scope.pay = function(order) {
		var url = $location.protocol() + "://" + $location.host() + ":" + $location.port() + "/#/payment?id=" + order.orders_id;
		$window.location.href = url;
	};
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("orderConfirmController", ["$scope", "$timeout", "$rootScope", "$routeParams", "$route", "orderServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $timeout, $rootScope, $routeParams, $route, orderServices, errorServices, toastServices, localStorageService, config) {
	if (!$routeParams.id) {
		$rootScope.back()
		return;
	}
	toastServices.show();
	orderServices.query_schedule_date({
		orders_id: $routeParams.id,
		schedule_type: "2"
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.days = data.scheduleDatas;
			return true;
		} else {
			errorServices.autoHide(data.message);
			$timeout(function() {
				$rootScope.back();
			}, 2000)
			return false;
		}
	}).then(function(promise) {
		if (!promise) {
			return;
		}
		$scope.current_day = $scope.days[0].schedule_data;
		$scope.query_schedule($scope.current_day)
	})
	$scope.calendar = {
		mode: "confirm",
		disabled: false,
		disabled_message: "All Day Busy",
		times: [],
		size: 0
	}
	$scope.query_schedule = function(day) {
		// $scope.calendar.selected = null;
		// var selected = $scope.calendar.selected.map(function(t) {
		// 	return t.from.day + " " + t.from.hour + "to" + t.to.day + " " + t.to.hour;
		// }).join("#");
		$scope.current_day = day;
		toastServices.show();
		orderServices.query_schedule_time({
			orders_id: $routeParams.id,
			schedule_type: "2",
			schedule_data: day
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.calendar.times = data.ScheduleBeans.map(function(time) {
					time.schedule_state = time.schedule_state;
					time.schedule_state_message = time.schedule_state_message;
					time.day = day;
					// var temp = time.day + " " + time.hour;
					// if (selected.indexOf(temp) != -1) {
					// 	time.schedule_state = 2;
					// 	time.active = true;
					// }
					if (time.schedule_state == 3) {
						time.schedule_state = 2;
						time.active = true;
						$scope.calendar.size = parseFloat($scope.calendar.size) + 0.5;
					}
					return time;
				})
				$scope.calendar.is_stop_course = data.is_stop_course;
				$scope.calendar.is_busy_24 = data.is_busy_24;
				if ($scope.calendar.is_stop_course == "1" || $scope.calendar.is_busy_24 == "1") {
					$scope.calendar.disabled = true;
				} else {
					$scope.calendar.disabled = false;
				}
				parse_selected();
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	$scope.get_from_time = function(t) {
		return t.split("-")[0]
	}
	$scope.get_to_time = function(t) {
		return t.split("-")[1]
	};

	function parse_selected() {
		$scope.calendar.selected = [];
		$scope.calendar.default_selected = [];
		var selectabled = $scope.calendar.times.filter(function(t) {
			return t.active;
		})
		for (var i = 0; i < selectabled.length; i = i + 2) {

			var selected_time = {
				from: selectabled[i],
				to: selectabled[i + 1]
			}
			$scope.calendar.selected.push(selected_time);
			$scope.calendar.default_selected.push(selected_time);
		}
	}
	$scope.input = {};
	// confirm
	$scope.confirm_course = function() {
		$scope.confirm.content_text = "Confirm Booking ?";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			orderServices.confirm_or_reject({
				schedule_type: "2",
				refund_reason: $scope.input.refund_reason,
				orders_schedule_ids: $scope.calendar.selected.map(function(c) {
					return c.from.orders_schedule_id
				}).join("#")
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$timeout(function() {
						$route.reload();
					}, 2000)
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	};
	// reject
	$scope.reject_course = function() {
		$scope.confirm.content_text = "Decline Booking";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			orderServices.confirm_or_reject({
				schedule_type: "1",
				refund_reason: $scope.input.refund_reason,
				orders_schedule_ids: $scope.calendar.selected.map(function(c) {
					return c.from.orders_schedule_id
				}).join("#")
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$timeout(function() {
						$route.reload();
					}, 2000)
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("orderCommentController", ["$scope", "$rootScope", "$routeParams", "$timeout", "orderServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $routeParams, $timeout, orderServices, errorServices, toastServices, localStorageService, config) {
	$scope.input = {
		skill: "0",
		environment: "0",
		attitude: "0"
	};
	toastServices.show();
	orderServices.query_course_by_comment({
		orders_id: $routeParams.id,
		comment_id: $routeParams.c_id,
		latitude: "0",
		longitude: "0"
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.order = data.CommentCourseInfo;
			$scope.input.skill = (data.comment && data.comment.pro_skill) || 0;
			$scope.input.environment = (data.comment && data.comment.teaching_environment) || 0;
			$scope.input.attitude = (data.comment && data.comment.teaching_attitude) || 0;
			$scope.input.content = (data.comment && data.comment.note) || ""
		} else {
			errorServices.autoHide(data.message);
		}
	})
	$scope.hover = function(name, index) {
		return $scope.input[name] = index;
	}
	var commenting = false;
	$scope.ajaxForm = function() {
		if (commenting) {
			return;
		}
		commenting = true;
		toastServices.show();
		orderServices.comment({
			comment_id: $routeParams.c_id,
			orders_id: $routeParams.id,
			course_id: $scope.order.Course.course_id,
			public_course_user_id: $scope.order.Course.user_id,
			note: $scope.input.content,
			pro_skill: $scope.input.skill,
			teaching_environment: $scope.input.environment,
			teaching_attitude: $scope.input.attitude
		}).then(function(data) {
			toastServices.hide();
			commenting = false;
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$timeout(function() {
					$rootScope.back();
				}, 2000)
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("orderCancelController", ["$scope", "$timeout", "$rootScope", "$routeParams", "orderServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $timeout, $rootScope, $routeParams, orderServices, errorServices, toastServices, localStorageService, config) {
	if (!$routeParams.id) {
		$rootScope.back()
		return;
	}
	toastServices.show();
	orderServices.query_schedule_date({
		orders_id: $routeParams.id,
		schedule_type: "1"
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.days = data.scheduleDatas;
			return true;
		} else {
			errorServices.autoHide(data.message);
			$timeout(function() {
				$rootScope.back();
			}, 2000)
			return false;
		}
	}).then(function(promise) {
		if (!promise) {
			return;
		}
		$scope.current_day = $scope.days[0].schedule_data;
		$scope.query_schedule($scope.current_day)
	})
	$scope.calendar = {
		mode: "confirm",
		disabled: false,
		disabled_message: "All Day Busy",
		times: [],
		size: 0
	}
	$scope.query_schedule = function(day) {
		// $scope.calendar.selected = null;
		// var selected = $scope.calendar.selected.map(function(t) {
		// 	return t.from.day + " " + t.from.hour + "to" + t.to.day + " " + t.to.hour;
		// }).join("#");
		$scope.current_day = day;
		toastServices.show();
		orderServices.query_schedule_time({
			orders_id: $routeParams.id,
			schedule_type: "1",
			schedule_data: day
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.calendar.times = data.ScheduleBeans.map(function(time) {
					time.schedule_state = time.schedule_state;
					time.schedule_state_message = time.schedule_state_message;
					time.day = day;
					// var temp = time.day + " " + time.hour;
					// if (selected.indexOf(temp) != -1) {
					// 	time.schedule_state = 2;
					// 	time.active = true;
					// }
					if (time.schedule_state == 3) {
						time.schedule_state = 2;
						time.active = true;
						$scope.calendar.size = parseFloat($scope.calendar.size) + 0.5;
					}
					return time;
				})
				$scope.calendar.is_stop_course = data.is_stop_course;
				$scope.calendar.is_busy_24 = data.is_busy_24;
				if ($scope.calendar.is_stop_course == "1" || $scope.calendar.is_busy_24 == "1") {
					$scope.calendar.disabled = true;
				} else {
					$scope.calendar.disabled = false;
				}
				parse_selected();
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	$scope.get_from_time = function(t) {
		return t.split("-")[0]
	}
	$scope.get_to_time = function(t) {
		return t.split("-")[1]
	};

	function parse_selected() {
		$scope.calendar.selected = [];
		$scope.calendar.default_selected = [];
		var selectabled = $scope.calendar.times.filter(function(t) {
			return t.active;
		})
		for (var i = 0; i < selectabled.length; i = i + 2) {

			var selected_time = {
				from: selectabled[i],
				to: selectabled[i + 1]
			}
			$scope.calendar.selected.push(selected_time);
			$scope.calendar.default_selected.push(selected_time);
		}
	}
	$scope.input = {};
	// confirm
	$scope.confirm_course = function() {
		$scope.confirm.content = "确定取消课程？";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			orderServices.cancel({
				// schedule_type: "2",
				// refund_reason: $scope.input.refund_reason,
				orders_schedule_ids: $scope.calendar.selected.map(function(c) {
					return c.from.orders_schedule_id
				}).join("#")
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	};
	// reject
	$scope.reject_course = function() {
		$scope.confirm.content = "Decline Booking";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			console.log("reject")
		}
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("orderBookingController", ["$scope", "$rootScope", "$route", "$routeParams", "$filter", "$timeout", "coursesServices", "orderServices", "scheduleServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $route, $routeParams, $filter, $timeout, coursesServices, orderServices, scheduleServices, errorServices, toastServices, localStorageService, config) {
	// schedule
	$scope.calendar = {
		mode: "edit",
		disabled: false,
		disabled_message: "All Day Busy",
		times: [],
		size: 1,
		selected: []
	}
	$scope.query_schedule = function(day) {
		// $scope.calendar.selected = [];
		var selected = $scope.calendar.selected.map(function(t) {
			return t.from.day + " " + t.from.hour + "to" + t.to.day + " " + t.to.hour;
		}).join("#");
		toastServices.show();
		scheduleServices.query_by_course({
			course_id: $routeParams.course_id,
			user_id: $rootScope.user.user_id,
			choice_currentdate: day,
			orders_id: $routeParams.order_id
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.schedule_meta = data;
				$scope.calendar.times = data.ScheduleBeans.map(function(time) {
					time.schedule_state = time.schedule_state;
					time.schedule_state_message = time.schedule_state_message;
					time.day = day;
					var temp = time.day + " " + time.hour;
					if (selected.indexOf(temp) != -1) {
						time.schedule_state = 2;
						time.active = true;
					}
					return time;
				})
				$scope.calendar.is_stop_course = data.is_stop_course;
				$scope.calendar.is_busy_24 = data.is_busy_24;
				if ($scope.calendar.is_stop_course == "1" || $scope.calendar.is_busy_24 == "1") {
					$scope.calendar.disabled = true;
				} else {
					$scope.calendar.disabled = false;
				}
				$scope.calendar.size = data.under_select_course_num;
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
	$scope.calendar.onDayChange = function() {
		$scope.query_schedule($filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"))
	};
	coursesServices.query_by_id({
		course_id: $routeParams.course_id,
		latitude: 0,
		longitude: 0
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.course = data.Result.Course;
			// query schedule
			$scope.calendar = angular.extend({}, $scope.calendar);
			$scope.calendar.day = $filter("date")(new Date($scope.course.freeCourseDay).getTime(), "MMM dd,yyyy");
		} else {
			errorServices.autoHide(data.message);
		}
	}).then(function(data) {
		$scope.query_schedule($filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"));
	});
	// $scope.query_schedule($filter("date")(new Date().getTime(), "yyyy-MM-dd"));
	// 获取剩余可选课程
	$scope.get_left = function() {
		return parseFloat($scope.calendar.size) - parseFloat($scope.calendar.selected.length);
	};
	$scope.get_from_time = function(t) {
		return t.split("-")[0]
	}
	$scope.get_to_time = function(t) {
		return t.split("-")[1]
	};
	$scope.parse_day = function(day) {
			var days = day.split("-");
			return days[1] + " / " + days[2] + " / " + days[0];
		}
		// confirm booking
	$scope.booking = function() {
		toastServices.show();
		orderServices.booking({
			orders_id: $routeParams.order_id,
			course_id: $routeParams.course_id,
			choice_currentdates: $scope.calendar.selected.map(function(c) {
				return c.from.day + "A" + c.from.hour_index + "A" + c.to.hour_index;
			}).join("#"),
			under_select_course_num: $scope.calendar.size
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				// errorServices.autoHide(data.message);
				$scope.confirm.ok_text = "Ok";
				$scope.confirm.content_text = data.message;
				$scope.confirm.content_type = "dialog"
				$scope.confirm.open();
				$scope.confirm.cancle_callback = function() {
					$route.reload();
				}
				$scope.confirm.ok_callback = function() {
					$route.reload();
				}
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("messagesController", ["$scope", "$rootScope", "$route", "$timeout", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $route, $timeout, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.messages = [];
	$scope.page = {
		pn: 1,
		page_size: 10,
		message: "Load More",
		type: $rootScope.user.agent_level
	}
	$scope.loadMore = function() {
		if ($scope.no_more) {
			return;
		}
		toastServices.show();
		$scope.page.message = "loading...";
		userServices.query_messages($scope.page).then(function(data) {
			toastServices.hide();
			$scope.page.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.messages = $scope.messages.concat(data.Result.Comments.list);
				$scope.no_more = $scope.messages.length == data.Result.Comments.totalRow ? true : false;
				$rootScope.user.read_number > 0 && userServices.sync();
			} else {
				errorServices.autoHide("Server error");
			}
			if ($scope.no_more) {
				$scope.page.message = $scope.messages.length + " records found";
			}
			$scope.page.pn++;
		})

	}
	$scope.loadMore();
	// remove message
	$scope.remove = function(message) {
		$scope.confirm.content = "Delete message ?";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			userServices.remove_message({
				delete_type: $rootScope.user.agent_level,
				comment_id: message.comment_id
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$timeout(function() {
						$route.reload();
					}, 2000)
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	}
	$scope.input = {};
	$scope.reply = function(message) {
		$scope.reply_id = message.comment_id;
	}
	$scope.confirm_reply = function(message) {
		console.log($scope.input.reply_content)
		toastServices.show();
		userServices.reply_message({
			comment_id: message.comment_id,
			content: $scope.input.reply_content
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.reply_id = "";
				$scope.input.reply_content = "";
				$route.reload();
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("listController", ["$scope", "$rootScope", "$timeout", "$routeParams", "$location", "googleMapServices", "skillopediaServices", "coursesServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $timeout, $routeParams, $location, googleMapServices, skillopediaServices, coursesServices, errorServices, toastServices, localStorageService, config) {
	$scope.input = {
		price: 0,
		review: 0,
		hot: 0,
	};
	$scope.input.category = {
		name: $routeParams.type == "2" ? $routeParams.category : "",
		id: $routeParams.category_id || "0"
	};
	// query category list;
	skillopediaServices.query_all_second_category().then(function(data) {
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.categorys = data.Result.Categorys;
		} else {
			errorServices.autoHide(data.message);
		}
	});
	// query course list;
	$scope.courses = [];
	$scope.paging = {
		pn: 1,
		page_size: 10,
		message: "Load More",
		kw: $routeParams.kw,
		type: $routeParams.type,
		latitude: "0",
		longitude: "0",
		category_02_id: $scope.input.category.id,
		category_02_name: $scope.input.category.name,
		distances: $scope.input.distance,
		prioritys: $scope.input.priority,
		session_rate: $scope.input.session_rate
	}
	$scope.loadMore = function() {
		toastServices.show();
		$scope.paging.message = "loading...";
		coursesServices.query($scope.paging).then(function(data) {
			toastServices.hide();
			$scope.paging.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.courses = data.Result.Courses.list;
				$scope.paging.page_size = $scope.paging.page_size;
				$scope.paging.total_items = data.Result.Courses.totalRow;
			} else {
				errorServices.autoHide("Server error");
			}
		})

	}
	$scope.loadMore();
	// reload course;
	$scope.reload = function() {
		// $location.search({
		// 	category: null,
		// 	category_id: null
		// });
		// $scope.courses = [];
		$scope.paging = angular.extend({}, $scope.paging, {
			pn: $scope.paging.pn,
			page_size: $scope.paging.page_size,
			message: "Load More",
			kw: $routeParams.kw,
			type: "2",
			latitude: "0",
			longitude: "0",
			category_02_id: $scope.input.category.id,
			category_02_name: $scope.input.category.name,
			distances: $scope.input.distance,
			prioritys: $scope.input.priority,
			price_type: $scope.input.price,
			review_type: $scope.input.review,
			hot_type: $scope.input.hot,
			travel_to_session: $scope.input.travel != 1 ? "" : $scope.input.travel,
			session_rate: $scope.input.session_rate
		})
		$scope.loadMore();
	};
	$scope.paging.callback = function() {
		$scope.reload();
	};
	// filter by category;
	$scope.$watch("input.category", function(n, o) {
		if (n === o) {
			return;
		}
		localStorageService.set("cache_category", n);
		$location.path("list").search({
			category: n.name,
			category_id: n.id,
			type: 2
		});
		// $scope.reload();
	}, true);
	var sort_1 = sort_2 = sort_3 = 0;
	$scope.sort_by_price = function() {
		$scope.input.review = sort_2 = 0;
		$scope.input.hot = sort_3 = 0;
		$scope.input.price = sort_1++ % 2 + 1;
		$scope.reload();
	};
	$scope.sort_by_review = function() {
		$scope.input.price = sort_1 = 0;
		$scope.input.hot = sort_3 = 0;
		$scope.input.review = sort_2++ % 2 + 1;
		$scope.paging.pn = 1;
		$scope.reload();
	};
	$scope.sort_by_hot = function() {
		$scope.input.price = sort_1 = 0;
		$scope.input.review = sort_2 = 0;
		$scope.input.hot = sort_3++ % 2 + 1;
		$scope.paging.pn = 1;
		$scope.reload();
	};
	$scope.input.travel = 0;
	$scope.travel = function() {
		if ($scope.input.travel == 0) {
			$scope.input.travel = 1;
		} else {
			$scope.input.travel = 0;
		}
		$scope.paging.pn = 1;
		$scope.reload();
	};
	// $scope.travel_yes = function() {
	// 	$scope.input.travel = 1;
	// 	$scope.reload();
	// };
	// $scope.travel_no = function() {
	// 	$scope.input.travel = 0;
	// 	$scope.reload();
	// };
	$scope.open_map = function(course, e) {
		e.preventDefault();
		e.stopPropagation();
		$.magnificPopup.open({
			items: {
				// src: "https://maps.google.com/maps?q=" + course.city + course.area + course.street
				src: "<div style='height:500px;width:80%;max-width:800px;margin:auto auto;border:1px solid #d2d2d2;background-color:white' id='map'></div>"
			},
			type: "inline"
		});
		$timeout(function() {
			googleMapServices.geocoding({
				address: course.street + "," + course.area + "," + course.city
			}).then(function(data) {
				$scope.lat_lng = data.results[0].geometry.location;
				var map = googleMapServices.create_map(document.getElementById('map'), $scope.lat_lng);
				// console.log(map)
				var circle_marker = googleMapServices.create_circle_marker(map, $scope.lat_lng);
			})
		}, 0)
	};
	// go to detail
	$scope.local_go = function(course) {
		localStorageService.set("freeCourseDay", course.freeCourseDay);
		$location.path("detail").search({
			category: null,
			cagegory_id: null,
			course_id: course.course_id
		});
	};
	$scope.price_callback = function(position, value) {
		$scope.input.session_rate = value;
		$timeout(function() {
			$scope.reload();
		}, 100)
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("landingController", ["$scope", "$rootScope", "$location", "$route", "$window", "$timeout", "facebookServices", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $location, $route, $window, $timeout, facebookServices, userServices, errorServices, toastServices, localStorageService, config) {
	if ($rootScope.is_signin()) {
		// $rootScope.back();
		$location.path("index").replace();
	}
	if (localStorageService.get("facebook_entry")) {
		$scope.facebook_entry = localStorageService.get("facebook_entry");
	}
	if (localStorageService.get("twitter_entry")) {
		$scope.twitter_entry = localStorageService.get("twitter_entry");
	}
	$scope.input = {
		signin_email: "",
		signin_password: "",
		signup_username: "",
		signup_email: "",
		signup_password: "",
		forget_email: "",
	}
	$scope.signin_action = function() {
		toastServices.show();
		userServices.rsa_key().then(function(data) {
			var crypt = new JSEncrypt(),
				private_key = data;
			crypt.setPrivateKey(private_key);
			var crypted_str = crypt.encrypt($scope.input.signin_password);
			$scope.input.signin_password = crypted_str;
		}).then(function(data) {
			toastServices.show();
			userServices.signin({
				email: $scope.input.signin_email,
				password: $scope.input.signin_password,
				t_uid: localStorageService.get("t_uid"),
				f_uid: localStorageService.get("f_uid")
			}).then(function(data) {
				toastServices.hide();
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					localStorageService.set("token", data.token);
					userServices.sync();
					errorServices.autoHide(data.message);
					// try to index
					$location.path("index").replace();
					// jump only when index is the current page
					$timeout(function() {
						$window.location.href = $location.protocol() + "://" + $location.host() + ":" + $location.port();
					}, 2000)
				}
				if (data.code == config.request.SUCCESS && data.status == 5) {
					$scope.reconfirm_signin = true;
					$scope.input.signin_password = "";
					return;
				}
				$scope.input.signin_password = "";
				errorServices.autoHide(data.message);
			})
		})
	}
	$scope.signup_action = function() {
		toastServices.show();
		userServices.signup({
			nickname: $scope.input.username,
			email: $scope.input.signup_email,
			password: $scope.input.signup_password,
			t_uid: localStorageService.get("t_uid"),
			f_uid: localStorageService.get("f_uid")
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				localStorageService.set("token", data.user.token);
				$rootScope.user = data.user;
				errorServices.autoHide(data.message);
				// try to index
				$location.path("index").replace();
				// jump only when index is the current page
				$timeout(function() {
					$window.location.href = $location.protocol() + "://" + $location.host() + ":" + $location.port();
				}, 2000)
			}
			if (data.code == config.request.SUCCESS && data.status == 3) {
				$scope.input.signup_password = "";
				$scope.reconfirm_signup = true;
				return;
			}
			$scope.input.signup_password = "";
			errorServices.autoHide(data.message);
		})
	}
	$scope.forget_action = function() {
		toastServices.show();
		userServices.forget({
			email: $scope.input.forget_email,
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	$scope.resend_email = function(email) {
		toastServices.show();
		userServices.resend_email({
			email: email
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message, 5000);
				$timeout(function() {
					$scope.reconfirm_signup = false;
					$scope.reconfirm_signin = false;
					$rootScope.close_popup_signin();
				}, 5000);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	// 绑定facebook关联账号
	$scope.bind_facebook = function() {
			toastServices.show();
			userServices.rsa_key().then(function(data) {
				toastServices.hide();
				var crypt = new JSEncrypt(),
					private_key = data;
				crypt.setPrivateKey(private_key);
				var crypted_str = crypt.encrypt($scope.input.binding_password);
				$scope.input.binding_password = crypted_str;
			}).then(function(data) {
				toastServices.show();
				userServices.binding_account({
					email: $scope.facebook_entry.email,
					password: $scope.input.binding_password,
				}).then(function(data) {
					toastServices.hide()
					if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
						localStorageService.remove("binding_account");
						localStorageService.set("token", data.token);
						userServices.sync();
						// try to index
						$location.path("index").replace();
						// jump only when index is the current page
						$timeout(function() {
							$window.location.href = $location.protocol() + "://" + $location.host() + ":" + $location.port();
						}, 2000)
					} else {
						errorServices.autoHide(data.message);
					}
					$scope.input.binding_password = "";
				})
			})
		}
		// 绑定twitter关联账号
	$scope.bind_twitter = function() {
		toastServices.show();
		userServices.rsa_key().then(function(data) {
			toastServices.hide();
			var crypt = new JSEncrypt(),
				private_key = data;
			crypt.setPrivateKey(private_key);
			var crypted_str = crypt.encrypt($scope.input.binding_password);
			$scope.input.binding_password = crypted_str;
		}).then(function(data) {
			toastServices.show();
			userServices.binding_account({
				email: $scope.twitter_email,
				password: $scope.input.binding_password,
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					localStorageService.remove("binding_account");
					localStorageService.set("token", data.token);
					userServices.sync();
					// try to index
					$location.path("index").replace();
					// jump only when index is the current page
					$timeout(function() {
						$window.location.href = $location.protocol() + "://" + $location.host() + ":" + $location.port();
					}, 2000)
				} else {
					errorServices.autoHide(data.message);
				}
				$scope.input.binding_password = "";
			})
		})
	}
	$rootScope.sign = "signin";
	$scope.signin = function() {
		$rootScope.sign = "signin";
	}
	$scope.signup = function() {
		$rootScope.sign = "signup";
	};
	// oauth
	$scope.facebook_login = function() {
		if (!$window.FB) return;
		toastServices.show()
		$window.FB && facebookServices.login().then(function(data) {
			toastServices.hide();
			if (!data.email) {
				toastServices.hide();
				errorServices.autoHide("Sorry facebook email address not found, Login failed");
				facebookServices.logout();
				return;
			}
			localStorageService.set("facebook_entry", data);
			toastServices.show();
			userServices.login_by_oauth({
				email: data.email,
				icon_url: data.picture.data.url,
				nickname: data.name
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					localStorageService.set("token", data.token);
					userServices.sync();
					$rootScope.close_popup_signin();
					$route.reload();
				}
				if (data.code == config.request.SUCCESS && (data.status == 2 || data.status == 3)) {
					errorServices.autoHide(data.message)
				}
				if (data.code == config.request.SUCCESS && data.status == 4) {
					$window.location.href = "https://www.skillpier.com/landingFacebook";
				}
			})
		});
	}
	$scope.twitter_login = function() {
		$window.location.href = config.url + "/twitterOne";
	}
	$scope.go = function() {
		$window.location.href = $location.protocol() + "://" + $location.host() + ":" + $location.port();
	}
	$scope.remove_panel = function() {
		$scope.reconfirm_signin = false;
		$scope.reconfirm_signup = false;
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("indexController", ["$scope", "$rootScope", "$location", "$timeout", "skillopediaServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $location, $timeout, skillopediaServices, errorServices, toastServices, localStorageService, config) {
	// banner
	toastServices.show();
	skillopediaServices.query_banner().then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.banners = data.Result.homeBanner;
		} else {
			errorServices.autoHide(data.message);
		}
	});
	// base category
	toastServices.show();
	skillopediaServices.query_base_category().then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.sport = data.Result.Category01s[0];
			$scope.arts = data.Result.Category01s[1];
			$rootScope.sr.reveal('.feature-item', 50);
		} else {
			errorServices.autoHide(data.message);
		}
	});
	$scope.open_left_feature = function(e) {
		var target = e.currentTarget;
		if ($(target).hasClass("active")) {
			return;
		}
		toastServices.show();
		skillopediaServices.query_second_category({
			category_01_id: $scope.sport.category_01_id
		}).then(function(data) {
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.sport_seconds = data.Result.Category02s;
				$timeout(function() {
					toastServices.hide()
					open_left_feature(e);
				}, 100)
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
	$scope.open_right_feature = function(e) {
		var target = e.currentTarget;
		if ($(target).hasClass("active")) {
			return;
		}
		toastServices.show();
		skillopediaServices.query_second_category({
			category_01_id: $scope.arts.category_01_id
		}).then(function(data) {
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.art_seconds = data.Result.Category02s;
				$timeout(function() {
					toastServices.hide()
					open_right_feature(e);
				}, 100)
			} else {
				errorServices.autoHide(data.message);
			}
		})

	}
	$scope.close_left = function(e) {
		close_left(e);
	};
	$scope.close_right = function(e) {
		close_right(e);
	};
	// hot
	toastServices.show();
	skillopediaServices.query_recommand_category().then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.hots = data.Result.Catetorys;
			$timeout(function() {
				$(".category-large").hover(function() {
					$(this).find("img").addClass("active");
					$(this).find(".category-caption").addClass("hover");
				}, function() {
					$(this).find("img").removeClass("active");
					$(this).find(".category-caption").removeClass("hover");
				});
				$(".category-small").hover(function() {
					$(this).find(".category-caption").addClass("hover");
				}, function() {
					$(this).find(".category-caption").removeClass("hover");
				});
				$rootScope.sr.reveal('.category-large', 50);
				$rootScope.sr.reveal('.category-small', 50);
			}, 1000)
		} else {
			errorServices.autoHide(data.message);
		}
	})
	$scope.go_list = function(sport_second) {
		var coming_soon = ["Baking", "Dance", "Yoga", "Painting"];
		if (coming_soon.includes(sport_second.category_02_name)) {
			errorServices.autoHide("Coming soon");
			return;
		}
		$location.path("list").search({
			category: sport_second.category_02_name,
			category_id: sport_second.category_02_id,
			type: 2
		});
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("headerController", ["$scope", "$window", "$timeout", "$rootScope", "$route", "userServices", "appServices", "orderServices", "errorServices", "toastServices", "localStorageService", "config", function($scope,$window,$timeout,$rootScope, $route, userServices, appServices,orderServices, errorServices, toastServices, localStorageService, config) {
	$scope.query_shoppingcart_count = function() {
		orderServices.query_shoppingcart_count().then(function(data) {
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.amount = data.total_card_number;
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
	$rootScope.is_signin() && ($scope.query_shoppingcart_count());
	
	$scope.show_menu = function(e) {
		if ($(".dropdown-menu").hasClass("active")) {
			$(".dropdown-menu").removeClass("active")
		} else {
			$(".dropdown-menu").addClass("active")
		}
		e.preventDefault();
		e.stopPropagation();
	}

	$("body").bind("click", function() {
		$(".dropdown-menu").removeClass("active");
	});



	$scope.$on("addToCart", function() {
		$scope.query_shoppingcart_count();
	})
	$scope.logout = function() {
		userServices.logout();
		$route.reload();
	}

	 $scope.onTimeout = function(){
		 var href = $window.location.href;
		  if(!$rootScope.is_signin() && href.indexOf("index") != -1){
			  appServices.pop_coupon()
			  localStorageService.set("coupon_pop","yes");
		 }
    };

	var mytimeout
	if (!localStorageService.get("coupon_pop")){
		$timeout($scope.onTimeout,20000);
	}
	
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("forgetController", ["$scope", "$rootScope", "$routeParams", "$route", "$location", "$window", "$timeout", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $routeParams, $route, $location, $window, $timeout, userServices, errorServices, toastServices, localStorageService, config) {
	if ($rootScope.is_signin() || !$routeParams.token) {
		$location.path("index").search("token", null).replace();
		return;
	}
	$scope.input = {
		password_1: "",
		password_2: ""
	}
	$scope.forget_action = function() {
		if ($scope.input.password_1 != $scope.input.password_2) {
			errorServices.autoHide("twice password is different");
			return;
		}
		toastServices.show();
		userServices.reset({
			password: $scope.input.password_1,
			token: $routeParams.token
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$timeout(function() {
					$location.path("index").search("token", null).replace();
				}, 2000)
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("footerController", ["$scope", "skillopediaServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, skillopediaServices, errorServices, toastServices, localStorageService, config) {
	// base category
	toastServices.show();
	skillopediaServices.query_base_category().then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.sport_id = data.Result.Category01s[0].category_01_id;
			$scope.art_id = data.Result.Category01s[1].category_01_id;
		} else {
			errorServices.autoHide(data.message);
		}
	}).then(function(data) {
		// all sports
		skillopediaServices.query_second_category({
			category_01_id: $scope.sport_id
		}).then(function(data) {
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.sports = data.Result.Category02s;
			} else {
				errorServices.autoHide(data.message);
			}
		});
		// all arts
		skillopediaServices.query_second_category({
			category_01_id: $scope.art_id
		}).then(function(data) {
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.arts = data.Result.Category02s;
			} else {
				errorServices.autoHide(data.message);
			}
		})
	})
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("fillinorderController", ["$scope", "$rootScope", "$window", "$timeout", "$location", "$filter", "$routeParams", "$sce", "skillopediaServices", "googleMapServices", "orderServices", "scheduleServices", "userServices", "coursesServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $window, $timeout, $location, $filter, $routeParams, $sce, skillopediaServices, googleMapServices, orderServices, scheduleServices, userServices, coursesServices, errorServices, toastServices, localStorageService, config) {
    $scope.input = {};
    $scope.course = {};
    toastServices.show();
    orderServices.query_course({
        course_id: $routeParams.course_id,
        latitude: 0,
        longitude: 0
    }).then(function(data) {
        toastServices.hide()
        if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
            $scope.course = data.Course;
            $scope.old_course = angular.copy($scope.course);
            $scope.teaching_location_map = $scope.get_map($scope.course.city, $scope.course.area, $scope.course.street, $scope.course.address, 1);
            $scope.input.total_course_price = $scope.course.session_rate;
            // discount handle
            $scope.discounts = [];
            if ($scope.course.discount_price_01 > 0) {
                $scope.discounts.push({
                    purchase: $scope.course.discount_onetion_pur_money_01,
                    off: $scope.course.discount_price_01
                })
            }
            if ($scope.course.discount_price_02 > 0) {
                $scope.discounts.push({
                    purchase: $scope.course.discount_onetion_pur_money_02,
                    off: $scope.course.discount_price_02
                })
            }
            if ($scope.course.discount_price_03 > 0) {
                $scope.discounts.push({
                    purchase: $scope.course.discount_onetion_pur_money_03,
                    off: $scope.course.discount_price_03
                })
            }
            $scope.discounts.sort(function(x, y) {
                return parseFloat(x.purchase) > parseFloat(y.purchase);
            });
            // coupons handle
            $scope.query_coupons();
            // query schedule
            $scope.calendar = angular.extend({}, $scope.calendar);
            $scope.calendar.day = $filter("date")(new Date($scope.course.freeCourseDay).getTime(), "MMM dd,yyyy");

        } else {
            errorServices.autoHide(data.message);
        }
    }).then(function(data) {
        $scope.query_schedule($filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"))
    });
    // 优惠券
    $scope.coupons = [];
    $scope.input.coupons = {
        selected: "",
        all: []
    };
    $scope.query_coupons = function() {
        if (!$rootScope.is_signin()) {
            $scope.calculate();
            return;
        }
        toastServices.show();
        orderServices.query_coupons({
            category_01_id: $scope.course.category_01_id,
            category_02_id: $scope.course.category_02_id,
            user_id: $scope.course.user_id,
            course_id: $scope.course.course_id
        }).then(function(data) {
            toastServices.hide()
            if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
                $scope.coupons = data.Result.CourseCoupons;
                $scope.calculate();
            } else {
                errorServices.autoHide(data.message);
            }
        })
    };
    $scope.get_from_time = function(t) {
        return t.split("-")[0]
    }
    $scope.get_to_time = function(t) {
        return t.split("-")[1]
    };
    // 编辑地址 
    $scope.edit = function() {
        $.magnificPopup.open({
            items: {
                src: '#location-popup'
            },
            type: 'inline'
        }, 0);
    };
    $scope.input.street = "";
    $scope.input.address = "";
    $scope.input.area = "";
    $scope.input.city = "";
    // 默认不上门服务
    $scope.input.travel_to_session = 0;
    $scope.save_location = function() {

        // $scope.map_url = $scope.get_map($scope.input.state, $scope.input.city, $scope.input.street, $scope.input.apt);
        toastServices.show();
        googleMapServices.geocoding({
            address: $scope.input.street + "," + $scope.input.address + "," + $scope.input.area + "," + $scope.input.city + "," + $scope.input.zipcode
        }).then(function(data) {
            toastServices.hide();
            // valid address is legal
            var result = data.results.filter(function(r) {
                return !r.partial_match;
            });
            if (result.length == 0) {
                $scope.street_error = "The street name or number is not correct";
                return;
            }
            $scope.street_error = "";
            $scope.lat_lng = result[0].geometry.location;
            $scope.format_address = result[0].formatted_address;
            // valid address is in services
            toastServices.show();
            skillopediaServices.query_location_in_services({
                course_id: $routeParams.course_id,
                latitude: $scope.lat_lng.lat || "0",
                longitude: $scope.lat_lng.lng || "0"
            }).then(function(data) {
                toastServices.hide();
                if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
                    $scope.input.travel_to_session = 1;
                    $scope.calculate();
                    $.magnificPopup.close();
                } else {
                    errorServices.autoHide(data.message);
                }
            });
        })
    };
    $scope.reset_location = function() {
        $scope.teaching_location_map = $scope.get_map($scope.old_course.city, $scope.old_course.area, $scope.old_course.street, $scope.old_course.address, 1);
        $scope.course.city = $scope.old_course.city;
        $scope.course.area = $scope.old_course.area;
        $scope.course.street = $scope.old_course.street;
        $scope.course.address = $scope.old_course.address;
        $scope.course.zipcode = $scope.old_course.zipcode;
        $scope.input.travel_to_session = 0;
        $scope.calculate();
        $.magnificPopup.close();
    };
    $scope.query_remain = function() {
        return parseFloat($scope.calendar.size) - parseFloat($scope.calendar.selected.length);
    };
    // parse iframe map url
    $scope.get_map = function(state, city, street, unit, type) {
        // var map_url = "https://maps.google.com/maps?q=" + state + city + street + "&output=embed";
        // return $sce.trustAsResourceUrl(map_url);
        var state = state || "",
            city = city || "",
            street = street || "",
            unit = unit || "",
            type = type || "1";
        var address;
        type == "1" && (address = street + "," + city + "," + state);
        type == "2" && (address = street + "," + unit + "," + city + "," + state);
        googleMapServices.geocoding({
            address: address
        }).then(function(data) {
            $scope.lat_lng = data.results[0].geometry.location;
            $scope.format_address = data.results[0].formatted_address;
            var map = googleMapServices.create_map(document.getElementById('map'), $scope.lat_lng);
            // console.log(map)
            type == "1" && (googleMapServices.create_circle_marker(map, $scope.lat_lng));
            type == "2" && (googleMapServices.create_marker(map, $scope.lat_lng));
        })
    };
    // parse video url
    $scope.get_video = function(video) {
        if (video) {
            // ?autoplay=0
            var video = video.replace("watch?v=", "embed/");
            return $sce.trustAsResourceUrl(video);
        }
    };
    // 加入收藏
    $scope.like = function() {
        if (!$rootScope.is_signin()) {
            $rootScope.signin();
            return;
        }
        toastServices.show();
        userServices.like({
            course_id: $scope.course.course_id
        }).then(function(data) {
            toastServices.hide()
            if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
                errorServices.autoHide(data.message);
            } else {
                errorServices.autoHide(data.message);
            }
        })
    };
    // schedule
    $scope.calendar = {
        mode: "edit",
        disabled: false,
        disabled_message: "All Day Busy",
        times: [],
        size: 1
    }
    $scope.query_schedule = function(day) {
        $scope.calendar.selected = $scope.calendar.selected || [];
        var selected = $scope.calendar.selected.map(function(t) {
            return t.from.day + " " + t.from.hour + "to" + t.to.day + " " + t.to.hour;
        }).join("#");
        toastServices.show();
        scheduleServices.query_by_course({
            course_id: $routeParams.course_id,
            user_id: $scope.course.user_id,
            choice_currentdate: day,
        }).then(function(data) {
            toastServices.hide()
            if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
                $scope.calendar.times = data.ScheduleBeans.map(function(time) {
                    time.schedule_state = time.schedule_state;
                    time.schedule_state_message = time.schedule_state_message;
                    time.day = day;
                    var temp = time.day + " " + time.hour;
                    if (time.schedule_state == 3 && selected.indexOf(temp) != -1) {
                        time.schedule_state = 2;
                        time.active = true;
                    }
                    return time;
                })
                $scope.calendar.is_stop_course = data.is_stop_course;
                $scope.calendar.is_busy_24 = data.is_busy_24;
                if ($scope.calendar.is_stop_course == "1" || $scope.calendar.is_busy_24 == "1") {
                    $scope.calendar.disabled = true;
                } else {
                    $scope.calendar.disabled = false;
                }
            } else {
                errorServices.autoHide(data.message);
            }
        })
    }
    $scope.calendar.onDayChange = function() {
        $scope.query_schedule($filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"))
    };
    // action
    $scope.input.amount = 1;
    $scope.add_amount = function() {
        $scope.input.amount = ++$scope.input.amount > 50 ? --$scope.input.amount : $scope.input.amount;
        $scope.calculate();
        // control calendar selected size;
        $scope.calendar.size = $scope.input.amount;
    }
    $scope.minus_amount = function() {
        if (parseFloat($scope.input.amount) < parseFloat($scope.calendar.selected.length) + 1) {
            errorServices.autoHide("You have booking time,before you can change the amount, cancel booking")
            return;
        }
        $scope.input.amount = --$scope.input.amount < 1 ? ++$scope.input.amount : $scope.input.amount;
        $scope.calculate();
        // control calendar selected size;
        $scope.calendar.size = $scope.input.amount;
    }
    $scope.input.partner = 0;
    $scope.add_partner = function() {
        $scope.input.partner = ++$scope.input.partner > $scope.course.additional_partner ? --$scope.input.partner : $scope.input.partner;
        $scope.calculate()
    }
    $scope.minus_partner = function() {
        $scope.input.partner = --$scope.input.partner < 0 ? ++$scope.input.partner : $scope.input.partner;
        $scope.calculate();
    };
    // select package;
    $scope.select_package = function(package) {
        if (parseFloat(package.purchase) < parseFloat($scope.calendar.selected.length)) {
            errorServices.autoHide("You have booking time,before you can change the amount, cancel booking")
            return;
        }
        $scope.input.amount = package.purchase;
        $scope.calendar.size = $scope.input.amount;
        $scope.calculate();
    };
    //鼠标移入提示 
    $scope.show = function() {
        if ($(".hovertips").hasClass("active")) {
            $(".hovertips").removeClass("active")
        } else {
            $(".hovertips").addClass("active")
        }
    }
    $scope.hide = function() {
        if ($(".hovertips").hasClass("active")) {
            $(".hovertips").removeClass("active")
        }
    }
    $scope.calculate = function() {
        $scope.input.discount_total_course_price = $scope.input.discount_total_partner_fee = 0;
        // 总价 = 课程费用+小伙伴费用+首次服务费用+交通费用
        // 课程费用+小伙伴费用 = 课程单价*课程数量+小伙伴单价*小伙伴数量*课程数量
        // 课程费用
        $scope.input.total_course_price = parseFloat($scope.course.session_rate) * parseFloat($scope.input.amount);
        // 小伙伴费用
        $scope.input.total_partner_fee = parseFloat($scope.course.surcharge_for_each) * parseFloat($scope.input.partner) * parseFloat($scope.input.amount);
        // by total amount
        // 课程费用+小伙伴费用参与打折
        $scope.input.discount_total_course_price = $scope.input.discount_total_course_price || $scope.input.total_course_price;
        $scope.input.discount_total_partner_fee = $scope.input.discount_total_partner_fee || $scope.input.total_partner_fee;
        if ($scope.course.discount_type == 2) {
            angular.forEach($scope.discounts, function(discount) {
                if (parseFloat($scope.input.amount) > parseFloat(discount.purchase) - 1) {
                    $scope.input.temp_discount_price = discount.off;
                    // dscount percentage
                    $scope.input.discount_total_course_price = parseFloat($scope.input.total_course_price) * (1 - parseFloat(discount.off) / 100);
                    $scope.input.discount_total_partner_fee = parseFloat($scope.input.total_partner_fee) * (1 - parseFloat(discount.off) / 100);
                    $scope.input.discount_total_course_price = Math.max(0, $scope.input.discount_total_course_price);
                    $scope.input.discount_total_partner_fee = Math.max(0, $scope.input.discount_total_partner_fee);
                }
            });
        }
        $scope.input.coupons.all = $scope.coupons.filter(function(coupon) {
            //大于或者等于coupon的最低消费就可以使用
            return parseFloat($scope.input.discount_total_course_price) >= parseFloat(coupon.consume_money);
        });
        if ($scope.input.coupons.all.length > 0 && !$scope.is_watch) {
            $scope.input.coupons.selected = $scope.input.coupons.all[0];
        }
        if ($scope.input.coupons.all.length == 0) {
            $scope.is_watch = false;
            $scope.input.coupons.selected = {
                coupon_name: "no coupons available",
                my_coupon_id: "0"
            };
        }
        if ($scope.input.coupons.selected.coupon_money) {
            $scope.input.discount_total_course_price = parseFloat($scope.input.discount_total_course_price) - parseFloat($scope.input.coupons.selected.coupon_money);
            $scope.input.discount_total_course_price = Math.max(0, $scope.input.discount_total_course_price);
        }
        // 交通费用，如果选择上门
        $scope.input.total_traffic_cost = 0;
        // $scope.travel_place = $scope.course.city + $scope.course.area + $scope.course.street;
        // $scope.course_place = $scope.old_course.city + $scope.old_course.area + $scope.old_course.street;
        // if ($scope.course.travel_to_session == '1' && $scope.travel_place != $scope.course_place) {
        if ($scope.course.travel_to_session == '1' && $scope.input.travel_to_session) {
            $scope.input.total_traffic_cost = parseFloat($scope.course.travel_to_session_trafic_surcharge) * parseFloat($scope.input.amount);
        }
        // 首次服务费用 百分比,仅仅单节课程费用的百分比
        $scope.input.total_service_fee = parseFloat($scope.course.session_rate) * parseFloat($scope.course.first_joint_fee) / 100;
        // 计算总价格 课程价格+首次服务费+交通费
        $scope.calculate_total_price();
    }
    $scope.is_watch = false;
    $scope.$watch("input.coupons.selected", function(n, o) {
        if (n === o || o == "") {
            return;
        }
        $scope.is_watch = true;
        $scope.calculate();
    }, true);
    // 加入购物车动画
    var animate_dot = function() {
        $(".animate-dot").addClass("active").css({
            top: $(".shoppingcart").offset().top + 10,
            left: $(".shoppingcart").offset().left + $(".shoppingcart").width() + 10
        });
        $scope.$broadcast("addToCart");
        $timeout(function() {
            $(".animate-dot").removeClass("active");
        }, 500)
        $timeout(function() {
            $(".animate-dot").css({
                top: "50%",
                left: "50%"
            });
        }, 1000)
    };
    $scope.calculate_total_price = function() {
        var total_price = parseFloat($scope.input.total_course_price) + parseFloat($scope.input.total_partner_fee) + parseFloat($scope.input.total_service_fee) + parseFloat($scope.input.total_traffic_cost),
            discount_total_price = parseFloat($scope.input.discount_total_course_price) + parseFloat($scope.input.discount_total_partner_fee) + parseFloat($scope.input.total_service_fee) + parseFloat($scope.input.total_traffic_cost);
        $scope.input.total_price = total_price;
        $scope.input.discount_total_price = discount_total_price;
    };
    // 加入购物车;
    // 下单;
    $scope.fillinorder = function(type) {
        if (!$rootScope.is_signin()) {
            $rootScope.signin();
            return;
        }
        if ($scope.input.message && $scope.input.message.length > 400) {
            errorServices.autoHide("message too long");
            return;
        }
        // 首单服务费+交通费
        $scope.calculate_total_price();
        // var total_session_rate = $scope.input.discount_total_course_price || $scope.input.total_course_price,
        //     total_session_rate = parseFloat(total_session_rate) + parseFloat($scope.input.total_service_fee) + parseFloat($scope.input.total_traffic_cost),
        //     original_total_session_rate = parseFloat($scope.input.total_course_price) + parseFloat($scope.input.total_service_fee) + parseFloat($scope.input.total_traffic_cost);
        toastServices.show();
        orderServices.fillinorder({
            order_type: type,
            course_id: $scope.course.course_id,
            title: $scope.course.title,
            address: $scope.course.street + " " + $scope.course.address + ", " + $scope.course.area + ", " + $scope.course.city,
            course_user_id: $scope.course.user_id,
            buy_amount: $scope.input.amount,
            session_rate: $scope.course.session_rate,
            go_door_status: $scope.input.travel_to_session,
            go_door_city: $scope.input.city,
            go_door_area: $scope.input.area,
            go_door_street: $scope.input.street,
            go_door_address: $scope.format_address,
            go_door_latitude: ($scope.lat_lng && $scope.lat_lng.lat) || "0",
            go_door_longitude: ($scope.lat_lng && $scope.lat_lng.lng) || "0",
            go_door_zipcode: $scope.input.zipcode,
            go_door_traffic_cost: $scope.course.travel_to_session_trafic_surcharge,
            my_coupon_id: $scope.input.coupons.selected.my_coupon_id,
            my_coupon_money: $scope.input.coupons.selected.coupon_money,
            leave_message: $scope.input.message,
            discount_type: $scope.course.discount_type,
            discount_price: $scope.input.temp_discount_price,
            take_partner_num: $scope.input.partner,
            surcharge_for_each_cash: $scope.course.surcharge_for_each,
            total_session_rate: $scope.input.discount_total_price,
            original_total_session_rate: $scope.input.total_price,
            schedule_datas: $scope.calendar.selected.map(function(c) {
                return c.from.day + "A" + c.from.hour_index + "A" + c.to.hour_index;
            }).join("#"),
            first_joint_fee: $scope.input.total_service_fee
        }).then(function(data) {
            toastServices.hide()
            if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
                errorServices.autoHide(data.message);
                type == "1" && (animate_dot());
                $timeout(function() {
                    if (type == "1") {
                        $scope.query_schedule($filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"));
                        $scope.calendar.selected = []
                    }
                }, 2000)
                $timeout(function() {
                    var url = $location.protocol() + "://" + $location.host() + ":" + $location.port() + "/#/payment?id=" + data.orders_id;
                    type == "11" && ($window.location.href = url);
                }, 2000)
            } else {
                errorServices.autoHide(data.message);
            }
        })
    }
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("favouriteController", ["$scope", "$route", "$timeout", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $route, $timeout, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.courses = [];
	$scope.page = {
		pn: 1,
		page_size: 10,
		message: "Load More",
		latitude: "0",
		longitude: "0"
	}
	$scope.loadMore = function() {
		if ($scope.no_more) {
			return;
		}
		toastServices.show();
		$scope.page.message = "loading...";
		userServices.favourite($scope.page).then(function(data) {
			toastServices.hide();
			$scope.page.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.courses = $scope.courses.concat(data.Result.Collections.list);
				$scope.no_more = $scope.courses.length == data.Result.Collections.totalRow ? true : false;
			} else {
				errorServices.autoHide("Server error");
			}
			if ($scope.no_more) {
				if ($scope.courses.length == 0) {
					$scope.page.message = "No record found";
				}
				if ($scope.courses.length == 1) {
					$scope.page.message = data.Result.Courses.totalRow + " record found ";
				}
				if ($scope.courses.length > 1) {
					$scope.page.message = data.Result.Courses.totalRow + " records found ";
				}
			}
			$scope.page.pn++;
		})

	}
	$scope.loadMore();
	$scope.local_go = function(course_id) {
		$location.path("detail").search({
			course_id: course_id
		});
	};
	$scope.unlike = function(collection_id, e) {
		e.preventDefault();
		e.stopPropagation();
		toastServices.show();
		userServices.unlike({
			collection_id: collection_id
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$timeout(function() {
					$route.reload();
				}, 2000)
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("editStepController", ["$scope", "$timeout", "$routeParams", "$window", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $timeout, $routeParams, $window, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.input = {};
	// 封面
	// mock {id:"",url:""}
	$scope.input.covers = [];
	$scope.$on("upload_cover_success", function(event, args) {
		$scope.input.covers.push(args.message)
	});
	// 移除封面
	$scope.remove_cover = function(cover) {
		$scope.input.covers = $scope.input.covers.filter(function(c) {
			return cover != c;
		})
	};
	$scope.ajaxForm = function() {
		if (!$scope.input.content) {
			errorServices.autoHide("请填写内容");
			return;
		}
		toastServices.show();
		userServices.edit_step({
			title: $scope.input.title,
			content: $scope.input.content,
			status: "1",
			fileName: $scope.input.covers.join("#"),
			experience_id: $routeParams.id
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$timeout(function() {
					$window.close();
				}, 2000);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	// query old step;
	toastServices.show();
	userServices.query_step_by_user_id({
		experience_id: $routeParams.id
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.step = data.Result.ExperienceInfo;
			$scope.input.title = $scope.step.title;
			$scope.input.content = $scope.step.content;
			$scope.input.covers = $scope.step.exBanners.map(function(c) {
				return c.image_01;
			})
		} else {
			errorServices.autoHide(data.message);
		}
	})
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("editCourseController", ["$scope", "$routeParams", "$rootScope", "$sce", "$timeout", "$location", "$window", "googleMapServices", "skillopediaServices", "filterFilter", "coursesServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $routeParams, $rootScope, $sce, $timeout, $location, $window, googleMapServices, skillopediaServices, filterFilter, coursesServices, errorServices, toastServices, localStorageService, config) {
	// 未认证，跳转认证
	// agent_level 1:普通用户 2:教练
	if ($rootScope.user.agent_level != "2" && !$routeParams.flag) {
		$location.path("authenication").replace();
		return;
	}
	$window.onbeforeunload = function(e) {
		var dialogText = '确定离开网页吗？';
		e.returnValue = dialogText;
		return dialogText;
	}
	$scope.input = {};
	$scope.step = 1;
	$scope.show_step = function(step) {
		$scope.step = step;
		$("body").scrollTop(0);
	};
	// // 获取新建课程id
	// toastServices.show();
	// coursesServices.prapare_create_course().then(function(data) {
	// 	toastServices.hide()
	// 	if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
	// 		$scope.course_id = data.course_id
	// 	} else {
	// 		errorServices.autoHide(data.message);
	// 	}
	// });
	// 获取编辑课程详情
	$scope.course = {};
	toastServices.show();
	coursesServices.query_by_user({
		course_id: $routeParams.id,
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.course = data.Result.Course;
			$scope.input.title = $scope.course.title;
			// $scope.input.category_1 = 
			// $scope.input.category_2 = 
			parse_category();
			parse_certs($scope.course.CourseCertifications);
			// overview
			$scope.input.overview = $scope.course.overview;
			$scope.input.achievements = $scope.course.achievements;
			$scope.input.specialist = $scope.course.specialist;
			// covers
			$scope.input.covers = $scope.course.CourseBanners.map(function(c) {
				return c.image_01;
			});
			// video
			$scope.input.videos = $scope.course.videos.split("#").map(function(v) {
				var video = {
					id: new Date().getTime(),
					url: v
				}
				return video;
			}).filter(function(v) {
				return v.url
			});
			$scope.input.teaching_since = $scope.course.teaching_since;
			$scope.input.rate = $scope.course.session_rate;
			$scope.input.teaching_age = $scope.course.teaching_age;
			$scope.input.partner = $scope.course.additional_partner;
			$scope.input.surcharge = $scope.course.surcharge_for_each;
			parse_discount();
			$scope.input.travel_to_session = $scope.course.travel_to_session;
			$scope.input.distance = $scope.course.travel_to_session_distance;
			$scope.input.traffic_cost = $scope.course.travel_to_session_trafic_surcharge;
			$scope.input.location.street = $scope.course.street;
			$scope.input.location.apt = $scope.course.address;
			$scope.input.location.city = $scope.course.area;
			$scope.input.location.state = $scope.course.city;
			$scope.parse_weeks();
			// zipcode
			$scope.input.location.zipcode = $scope.course.zipcode;
			$scope.input.poster = $scope.course.user_images_01;
			// pickadate
			// $timeout(function() {
			// 	$(".pickadate").pickadate();
			// }, 0);
			$scope.input.hours = $scope.course.hours;
		} else {
			errorServices.autoHide(data.message);
		}
	});
	// 分类列表
	$scope.category_1 = [];
	$scope.category_2 = {};
	$scope.$watch("input.category_1", function(n, o) {
		if (n === o) return;
		if (o === undefined) return;
		if ($scope.category_2[n.name]) {
			$scope.input.category_2 = $scope.category_2[n.name][0];
		}
	});

	function parse_category() {
		toastServices.show();
		coursesServices.query_category().then(function(data) {
			toastServices.hide();
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				angular.forEach(data.Result.Categorys, function(category) {
					var obj = {};
					obj.name = category.category_01_name;
					obj.id = category.category_01_id;
					$scope.category_1.push(obj);
					$scope.category_2[category.category_01_name] = [];
					angular.forEach(category.category02s, function(sub) {
						var temp_obj = {};
						temp_obj.name = sub.category_02_name;
						temp_obj.id = sub.category_02_id;
						$scope.category_2[category.category_01_name].push(temp_obj);
					})
				});
				// $scope.input.category_1 = $scope.category_1[0];
				// $scope.input.category_2 = $scope.category_2[$scope.input.category_1.name][0];
				angular.forEach($scope.category_1, function(c1) {
					if (c1.id == $scope.course.category_01_id) {
						$scope.input.category_1 = c1;
					}
				})
				angular.forEach($scope.category_2[$scope.input.category_1.name], function(c2) {
					if (c2.id == $scope.course.category_02_id) {
						$scope.input.category_2 = c2;
					}
				})

			} else {
				errorServices.autoHide(data.message);
			}
		});
	}
	// 证书列表
	$scope.input.certs = [];

	function parse_certs(certs) {
		angular.forEach(certs, function(cert) {
			var c = {
				id: cert.course_certification_id,
				random_id: "",
				title: cert.name,
				time: cert.get_time,
				url: cert.image_01,
				institute: cert.institue
			};
			$scope.input.certs.push(c);
		})
	}
	// 增加证书输入
	$scope.add_cert = function() {
		var cert = {
			id: "",
			random_id: "",
			title: "",
			time: "",
			url: "",
			institute: ""
		};
		$scope.input.certs.push(cert);
	};
	$scope.remove_cert = function(cert) {
		$scope.input.certs = $scope.input.certs.filter(function(c) {
			return cert != c;
		})
		if (cert.id == "") return;
		toastServices.show();
		coursesServices.remove_certification({
			course_certification_id: cert.id
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	// 提交证书
	$scope.ajaxCert = function(cert, form) {
		if (form.$invalid) return;
		toastServices.show();
		coursesServices.create_certification({
			course_id: $routeParams.id,
			name: cert.title,
			get_time: cert.time,
			institue: cert.institute,
			filename: cert.url
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				cert.id = data.course_certification_id;
				errorServices.autoHide(data.message);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	// 编辑证书
	$scope.editCert = function(cert, form) {
		if (form.$invalid) return;
		toastServices.show();
		coursesServices.edit_certification({
			course_certification_id: cert.id,
			name: cert.title,
			get_time: cert.time,
			institue: cert.institute,
			filename: cert.url
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	// 封面
	$scope.$on("upload_poster_success", function(event, args) {
		$scope.input.poster = args.message;
	});
	// 其他图片
	// mock {id:"",url:""}
	$scope.input.covers = [];
	$scope.$on("upload_cover_success", function(event, args) {
		$scope.input.covers.push(args.message)
	});
	// 移除封面
	$scope.remove_cover = function(cover) {
		$scope.input.covers = $scope.input.covers.filter(function(c) {
			return cover != c;
		})
	};
	// video 视频路径
	$scope.input.videos = [];
	// 增加视频输入
	$scope.add_video = function() {
		var video = {
			id: new Date().getTime(),
			url: "",
		}
		$scope.input.videos.push(video);
	};
	$scope.remove_video = function(video) {
		$scope.input.videos = $scope.input.videos.filter(function(v) {
			return video != v;
		})
	};
	// 第二步
	// 课程时长
	$scope.course_durations = ["60"];
	$scope.input.course_duration = $scope.course_durations[0];
	// teaching since
	$scope.input.teaching_since = "";
	// 课程费用
	$scope.input.rate = "";
	// 教育年限
	$scope.input.teaching_age = "";
	// addtional partner
	$scope.input.partner = "";
	$scope.input.surcharge = "";
	// 打折方式
	function parse_discount() {
		$scope.input.discount_1 = {
			purchase: $scope.course.discount_onetion_pur_money_01,
			off: $scope.course.discount_price_01
		};
		$scope.input.discount_2 = {
			purchase: $scope.course.discount_onetion_pur_money_02,
			off: $scope.course.discount_price_02
		};
		$scope.input.discount_3 = {
			purchase: $scope.course.discount_onetion_pur_money_03,
			off: $scope.course.discount_price_03
		};
	};
	$scope.$watch("input.discount_1", function(n, o) {
		if (!n) return;
		if ($scope.input.discount_2.off < n.off) {
			$scope.input.discount_2.off = n.off;
		}
		if ($scope.input.discount_3.off < $scope.input.discount_2.off) {
			$scope.input.discount_3.off = $scope.input.discount_2.off;
		}
	}, true);
	$scope.$watch("input.discount_2", function(n, o) {
		if (!n) return;
		if ($scope.input.discount_3.off < n.off) {
			$scope.input.discount_3.off = n.off;
		}
	}, true);
	//鼠标移入提示 
	$scope.show = function() {
		if ($(".hovertips").hasClass("active")) {
			$(".hovertips").removeClass("active")
		} else {
			$(".hovertips").addClass("active")
		}
	}
	$scope.hide = function() {
		if ($(".hovertips").hasClass("active")) {
			$(".hovertips").removeClass("active")
		}
	};
	// 第三步
	$scope.input.travel_to_session = "1";
	$scope.input.distance = "";
	$scope.input.traffic_cost = "";
	$scope.input.location = {};
	$scope.input.location.street = "";
	$scope.input.location.apt = "";
	$scope.input.location.city = "";
	$scope.input.location.state = "";
	// zipcode
	$scope.input.location.zipcode = "";
	// var suggestions = [];
	// toastServices.show();
	// skillopediaServices.query_zipcode().then(function(data) {
	// 	toastServices.hide()
	// 	if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
	// 		suggestions = data.Result.CityBeans;
	// 	} else {
	// 		errorServices.autoHide(data.message);
	// 	}
	// })
	// $scope.$watch("input.location.zipcode", function(n, o) {
	// 	$scope.input.suggestions = filterFilter(suggestions, n);
	// })
	// $scope.select = function(s) {
	// 	$scope.input.location.zipcode = s;
	// 	$timeout(function() {
	// 		$scope.input.suggestions = [];
	// 	}, 100)
	// };
	$scope.location_mode = "edit";
	$scope.lat_lng = {
		lng: 0,
		lat: 0
	}
	$scope.save_location = function() {
		toastServices.show();
		googleMapServices.geocoding({
			address: $scope.input.location.street + "," + $scope.input.location.apt + "," + $scope.input.location.city + "," + $scope.input.location.state + "," + $scope.input.location.zipcode
		}).then(function(data) {
			toastServices.hide();
			var result = data.results.filter(function(r) {
				return !r.partial_match;
			});
			if (result.length == 0) {
				$scope.street_error = "The street name or number is not correct";
				return;
			}
			$scope.street_error = "";
			$scope.location_mode = "preview";
			$scope.lat_lng = result[0].geometry.location;
			$scope.format_address = result[0].formatted_address;
			var map = googleMapServices.create_map(document.getElementById('map'), $scope.lat_lng);
			// console.log(map)
			var marker = googleMapServices.create_marker(map, $scope.lat_lng);
			marker.addListener("dragend", function(e) {
				$scope.$apply(function() {
					$scope.lat_lng = e.latLng.toJSON()
				})
			})
		})
	}
	$scope.edit_location = function() {
		$scope.location_mode = "edit";
	};
	// parse iframe map url
	$scope.get_map = function(state, city, street, apt) {
		var map_url = "https://maps.google.com/maps?q=" + state + city + street + apt + "&output=embed";
		return $sce.trustAsResourceUrl(map_url);
	};
	// 第四步;
	$scope.parse_weeks = function() {
		var weeks = [],
			week_name = ["", "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
		for (var i = 0; i < 17; i++) {
			for (var j = 0; j < 8; j++) {
				// first
				if (i == 0 && j == 0) {
					weeks.push({
						week: "",
						time: "",
						check: false,
						text: "",
						type: "blank"
					});
					continue;
				}
				// first line
				if (i == 0) {
					weeks.push({
						week: "",
						time: "",
						check: false,
						text: week_name[j],
						type: "header"
					});
					continue;
				}
				// first col 
				if (j == 0) {
					var time = i + 5;
					weeks.push({
						week: "",
						time: "",
						check: false,
						text: time + ":00",
						type: "index"
					});
					continue;
				}
				var time = 2 * i - 1,
					week = j,
					time_reg = new RegExp("^" + time + "@" + week + "|" + "#" + time + "@" + week, "g"),
					check = false;
				if ($scope.course.hours.match(time_reg)) {
					check = true;
				}
				weeks.push({
					week: j,
					time: time,
					check: check,
					text: "",
					type: "content"
				});
			}
		}
		$scope.weeks = weeks;
		$scope.content_weeks = $scope.weeks.filter(function(w) {
			return w.type == 'content';
		});
		$scope.select_weeks = $scope.weeks.filter(function(w) {
			return w.type == "content" && w.check == true;
		});
		$scope.select_week = function(week) {
			if (week.type != 'content') {
				return;
			}
			week.check = !week.check;
			$scope.select_weeks = $scope.weeks.filter(function(w) {
				return w.type == "content" && w.check == true;
			});
		};
		$scope.check_all = function() {
			if ($scope.select_weeks.length == $scope.content_weeks.length) {
				$scope.weeks.map(function(w) {
					w.type == "content" && (w.check = false);
					return w;
				});
			} else {
				$scope.weeks.map(function(w) {
					w.type == "content" && (w.check = true);
					return w;
				});
			}
			$scope.select_weeks = $scope.weeks.filter(function(w) {
				return w.type == "content" && w.check == true;
			});
		};
	};
	// 提交表单 最终创建课程
	$scope.ajaxForm = function() {
		toastServices.show();
		coursesServices.edit_course({
			course_id: $routeParams.id,
			title: $scope.input.title,
			category_01_id: $scope.input.category_1.id,
			category_01_name: $scope.input.category_1.name,
			category_02_id: $scope.input.category_2.id,
			category_02_name: $scope.input.category_2.name,
			overview: $scope.input.overview,
			achievements: $scope.input.achievements,
			specialist: $scope.input.specialist,
			fileName: $scope.input.covers.join("#"),
			vedioURL: $scope.input.videos.map(function(video) {
				return video.url
			}).join("#"),
			session_length: $scope.input.course_duration,
			session_rate: $scope.input.rate,
			teaching_age: $scope.input.teaching_age,
			teaching_since: $scope.input.teaching_since,
			travel_to_session: $scope.input.travel_to_session,
			travel_to_session_distance: $scope.input.distance,
			travel_to_session_trafic_surcharge: $scope.input.traffic_cost,
			city: $scope.input.location.state,
			area: $scope.input.location.city,
			street: $scope.input.location.street,
			address: $scope.input.location.apt,
			zipcode: $scope.input.location.zipcode,
			latitude: $scope.lat_lng.lat,
			longitude: $scope.lat_lng.lng,
			additional_partner: $scope.input.partner,
			surcharge_for_each: $scope.input.surcharge,
			discount_type: "2", //$scope.input.discount == "by_money" ? "1" : "2",
			discount_onetion_pur_money_01: $scope.input.discount_1.purchase || "",
			discount_price_01: $scope.input.discount_1.off || "",
			discount_onetion_pur_money_02: $scope.input.discount_2.purchase || "",
			discount_price_02: $scope.input.discount_2.off || "",
			discount_onetion_pur_money_03: $scope.input.discount_3.purchase || "",
			discount_price_03: $scope.input.discount_3.off || "",
			hours: $scope.weeks.filter(function(w) {
				return w.type == "content" && w.check == true;
			}).map(function(w) {
				return w.time + "@" + w.week;
			}).join("#"),
			user_images_01: $scope.input.poster
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$timeout(function() {
					// $rootScope.back();
					// $window.close();
					$location.path("skillopedia").replace();
				}, 3000)
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
}]);
// uploadController upload certs
angular.module("Skillopedia").controller("uploadController", ["$scope", "utilServices", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, utilServices, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.$on("flow::filesSubmitted", function(event, flow) {
		if (flow.files.length == 0) return;
		toastServices.show();
		utilServices.resizeFile(flow.files[0].file).then(function(blob) {
			var fd = new FormData();
			fd.append("image_01", blob);
			userServices.upload_image(fd).then(function(data) {
				toastServices.hide();
				$scope.cert.url = data.fileName;
				errorServices.autoHide(data.message);
			}, function(e) {
				toastServices.hide();
				errorServices.autoHide("upload error");
			})
		})
	});
	$scope.$on('flow::fileAdded', function(event, flowFile, flow) {
		if (!{
				png: 1,
				gif: 1,
				jpg: 1,
				jpeg: 1
			}[flow.getExtension()]) {
			toastServices.hide();
			errorServices.autoHide("Picture is required")
			event.preventDefault(); //prevent file from uploading
			return;
		}
	});
}]);
// uploadCoversController
angular.module("Skillopedia").controller("uploadCoversController", ["$scope", "utilServices", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, utilServices, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.$on("flow::filesSubmitted", function(event, flow) {
		if (flow.files.length == 0) return;
		toastServices.show();
		utilServices.resizeFile(flow.files[0].file).then(function(blob) {
			var fd = new FormData();
			fd.append("image_01", blob);
			userServices.upload_image(fd).then(function(data) {
				toastServices.hide();
				$scope.$flow.files = [];
				$scope.$emit("upload_cover_success", {
					message: data.fileName
				});
				errorServices.autoHide(data.message);
			}, function(e) {
				toastServices.hide();
				errorServices.autoHide("upload error");
			})
		})
	});
	$scope.$on('flow::fileAdded', function(event, flowFile, flow) {
		if (!{
				png: 1,
				gif: 1,
				jpg: 1,
				jpeg: 1
			}[flow.getExtension()]) {
			toastServices.hide();
			errorServices.autoHide("Picture is required")
			event.preventDefault(); //prevent file from uploading
			return;
		}
	});
}]);
// uploadCoversController
angular.module("Skillopedia").controller("uploadPosterController", ["$scope", "utilServices", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, utilServices, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.$on("flow::filesSubmitted", function(event, flow) {
		if (flow.files.length == 0) return;
		toastServices.show();
		utilServices.resizeFile(flow.files[0].file).then(function(blob) {
			var fd = new FormData();
			fd.append("image_01", blob);
			userServices.upload_image(fd).then(function(data) {
				toastServices.hide();
				$scope.$flow.files = [];
				$scope.$emit("upload_poster_success", {
					message: data.fileName
				});
				errorServices.autoHide(data.message);
			}, function(e) {
				toastServices.hide();
				errorServices.autoHide("upload error");
			})
		})
	});
	$scope.$on('flow::fileAdded', function(event, flowFile, flow) {
		if (!{
				png: 1,
				gif: 1,
				jpg: 1,
				jpeg: 1
			}[flow.getExtension()]) {
			toastServices.hide();
			errorServices.autoHide("Picture is required")
			event.preventDefault(); //prevent file from uploading
			return;
		}
	});
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("detailController", ["$scope", "$rootScope", "$filter", "$routeParams", "$sce", "$timeout", "googleMapServices", "scheduleServices", "userServices", "coursesServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, $filter, $routeParams, $sce, $timeout, googleMapServices, scheduleServices, userServices, coursesServices, errorServices, toastServices, localStorageService, config) {
	$scope.course = {};
	toastServices.show();
	coursesServices.query_by_id({
		course_id: $routeParams.course_id,
		latitude: 0,
		longitude: 0
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.course = data.Result.Course;
			// query schedule
			$scope.calendar = angular.extend({}, $scope.calendar);
			$scope.calendar.day = $filter("date")(new Date($scope.course.freeCourseDay).getTime(), "MMM dd,yyyy");
		} else {
			errorServices.autoHide(data.message);
		}
	}).then(function(data) {
		$scope.query_schedule($filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"));
	});
	$scope.open_map = function(course, e) {
		e.preventDefault();
		e.stopPropagation();
		$.magnificPopup.open({
			items: {
				// src: "https://maps.google.com/maps?q=" + course.city + course.area + course.street
				src: "<div style='height:500px;width:80%;max-width:800px;margin:auto auto;border:1px solid #d2d2d2;background-color:white' id='map'></div>"
			},
			type: "inline"
		});
		$timeout(function() {
			googleMapServices.geocoding({
				address: course.street + "," + course.area + "," + course.city
			}).then(function(data) {
				$scope.lat_lng = data.results[0].geometry.location;
				var map = googleMapServices.create_map(document.getElementById('map'), $scope.lat_lng);
				// console.log(map)
				var circle_marker = googleMapServices.create_circle_marker(map, $scope.lat_lng);
			})
		}, 0)
	};
	// 加入收藏
	$scope.toggle_like = function() {
		if (!$rootScope.is_signin()) {
			$rootScope.signin();
			return;
		}
		if ($scope.course.is_collection == 0) {
			$scope.like();
		} else {
			$scope.unlike();
		}
	};
	$scope.like = function() {
		toastServices.show();
		userServices.like({
			course_id: $scope.course.course_id
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.course.is_collection = 1;
				$scope.course.collection_id = data.collection_id
				errorServices.autoHide(data.message);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	$scope.unlike = function() {
		toastServices.show();
		userServices.unlike({
			collection_id: $scope.course.collection_id
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.course.is_collection = 0;
				errorServices.autoHide(data.message);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	$scope.parse_age = function(age) {
		if (age && age.split("+").length > 1) {
			return true;
		}
		return false;
	};
	// schedule
	$scope.calendar = {
		mode: "",
		disabled: false,
		disabled_message: "All Day Busy",
		times: []
	}
	$scope.query_schedule = function(day) {
		$scope.calendar.selected = null;
		toastServices.show();
		scheduleServices.query_by_course({
			course_id: $routeParams.course_id,
			user_id: $scope.course.user_id,
			choice_currentdate: day,
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.calendar.times = data.ScheduleBeans.map(function(time) {
					time.schedule_state = time.schedule_state;
					time.schedule_state_message = time.schedule_state_message;
					return time;
				})
				$scope.calendar.is_stop_course = data.is_stop_course;
				$scope.calendar.is_busy_24 = data.is_busy_24;
				if ($scope.calendar.is_stop_course == "1" || $scope.calendar.is_busy_24 == "1") {
					$scope.calendar.disabled = true;
				} else {
					$scope.calendar.disabled = false;
				}
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
	$scope.calendar.onDayChange = function() {
		$scope.query_schedule($filter("date")(new Date($scope.calendar.day).getTime(), "yyyy-MM-dd"))
	};
	// 查询课程评价列表
	$scope.comments = [];
	$scope.page = {
		pn: 1,
		page_size: 10,
		message: "Load More",
		course_id: $routeParams.course_id
	}
	$scope.loadMore = function() {
		if ($scope.no_more) {
			return;
		}
		toastServices.show();
		$scope.page.message = "loading...";
		coursesServices.query_comment_by_course($scope.page).then(function(data) {
			toastServices.hide();
			$scope.page.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.comments = $scope.comments.concat(data.Result.Comments.list);
				$scope.total_comments = data.Result.Comments.totalRow;
				$scope.no_more = $scope.comments.length == data.Result.Comments.totalRow ? true : false;
			} else {
				errorServices.autoHide("Server error");
			}
			if ($scope.no_more) {
				if ($scope.comments.length == 0) {
					$scope.page.message = "No record found";
				}
				if ($scope.comments.length == 1) {
					$scope.page.message = data.Result.Comments.totalRow + " record found ";
				}
				if ($scope.comments.length > 1) {
					$scope.page.message = data.Result.Comments.totalRow + " records found ";
				}
			}
			$scope.page.pn++;
		})

	}
	$scope.loadMore();
	$scope.to_fix = function(m) {
		return m.toFixed(1);
	}
	$scope.parse_html = function(html) {
		if (!html) return;
		html = "<p>" + html + "</p>";
		return html.replace(/\n/g, "</p><p>").replace(/，\s*/g, ", ");
	}
	$scope.tab = "about";
	$scope.active_tab = function(tab) {
		$scope.tab = tab;
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("createStepController", ["$scope", "$timeout", "$window", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $timeout, $window, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.input = {};
	// 封面
	// mock {id:"",url:""}
	$scope.input.covers = [];
	$scope.$on("upload_cover_success", function(event, args) {
		$scope.input.covers.push(args.message)
	});
	// 移除封面
	$scope.remove_cover = function(cover) {
		$scope.input.covers = $scope.input.covers.filter(function(c) {
			return cover != c;
		})
	};
	$scope.ajaxForm = function() {
		if (!$scope.input.content) {
			errorServices.autoHide("请填写内容");
			return;
		}
		toastServices.show();
		userServices.create_step({
			title: $scope.input.title,
			content: $scope.input.content,
			status: "1",
			fileName: $scope.input.covers.join("#")
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$timeout(function() {
					$window.close();
				}, 2000);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
	$scope.save_to_draft = function() {
		toastServices.show();
		userServices.create_step({
			title: $scope.input.title,
			content: $scope.input.content || "",
			status: "2",
			fileName: $scope.input.covers.join("#")
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$timeout(function() {
					$window.close();
				}, 2000);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("createCourseController", ["$scope", "$routeParams", "$rootScope", "$sce", "$timeout", "$location", "$window", "googleMapServices", "skillopediaServices", "filterFilter", "coursesServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $routeParams, $rootScope, $sce, $timeout, $location, $window, googleMapServices, skillopediaServices, filterFilter, coursesServices, errorServices, toastServices, localStorageService, config) {
	// 未认证，跳转认证
	// agent_level 1:普通用户 2:教练
	if ($rootScope.user.agent_level != "2" && !$routeParams.flag) {
		$location.path("authenication").replace();
		return;
	}
	$window.onbeforeunload = function(e) {
		var dialogText = '确定离开网页吗？';
		e.returnValue = dialogText;
		return dialogText;
	}
	$scope.input = {};
	$scope.step = 1;
	$scope.show_step = function(step) {
		$scope.step = step;
		$("body").scrollTop(0);
	};
	// 获取新建课程id
	toastServices.show();
	coursesServices.prapare_create_course({
		is_auth_public: $routeParams.flag ? 2 : 1,
	}).then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.course_id = data.course_id;
			// pickadate
			// $timeout(function() {
			// 	$(".pickadate").pickadate();
			// }, 0);
		} else {
			errorServices.autoHide(data.message);
		}
	});
	// 分类列表
	$scope.category_1 = [];
	$scope.category_2 = {};
	$scope.$watch("input.category_1", function(n, o) {
		if (n === o) return;
		$scope.input.category_2 = $scope.category_2[$scope.input.category_1.name][0];
	});
	toastServices.show();
	coursesServices.query_category().then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			angular.forEach(data.Result.Categorys, function(category) {
				var obj = {};
				obj.name = category.category_01_name;
				obj.id = category.category_01_id;
				$scope.category_1.push(obj);
				$scope.category_2[category.category_01_name] = [];
				angular.forEach(category.category02s, function(sub) {
					var temp_obj = {};
					temp_obj.name = sub.category_02_name;
					temp_obj.id = sub.category_02_id;
					$scope.category_2[category.category_01_name].push(temp_obj);
				})
			});
			$scope.input.category_1 = $scope.category_1[0];
			$scope.input.category_2 = $scope.category_2[$scope.input.category_1.name][0];
		} else {
			errorServices.autoHide(data.message);
		}
	});
	// 证书列表
	$scope.input.certs = [];
	// 增加证书输入
	$scope.add_cert = function() {
		var cert = {
			id: "",
			random_id: "",
			title: "",
			time: "",
			url: "",
			institute: ""
		};
		$scope.input.certs.push(cert);
	};
	$scope.remove_cert = function(cert) {
		$scope.input.certs = $scope.input.certs.filter(function(c) {
			return cert != c;
		})
		if (cert.id == "") return;
		toastServices.show();
		coursesServices.remove_certification({
			course_certification_id: cert.id
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	// 提交证书
	$scope.ajaxCert = function(cert, form) {
		if (form.$invalid) return;
		toastServices.show();
		coursesServices.create_certification({
			course_id: $scope.course_id,
			name: cert.title,
			get_time: cert.time,
			institue: cert.institute,
			filename: cert.url
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				cert.id = data.course_certification_id;
				errorServices.autoHide(data.message);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	// 编辑证书
	$scope.editCert = function(cert, form) {
		if (form.$invalid) return;
		toastServices.show();
		coursesServices.edit_certification({
			course_certification_id: cert.id,
			name: cert.title,
			get_time: cert.time,
			institue: cert.institute,
			filename: cert.url
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	// 封面
	$scope.$on("upload_poster_success", function(event, args) {
		$scope.input.poster = args.message;
	});
	// 其他图片
	// mock {id:"",url:""}
	$scope.input.covers = [];
	$scope.$on("upload_cover_success", function(event, args) {
		console.log(args.message)
		$scope.input.covers.push(args.message)
	});
	// 移除封面
	$scope.remove_cover = function(cover) {
		$scope.input.covers = $scope.input.covers.filter(function(c) {
			return cover != c;
		})
	};
	// video 视频路径
	$scope.input.videos = [];
	// 增加视频输入
	$scope.add_video = function() {
		var video = {
			id: new Date().getTime(),
			url: "",
		}
		$scope.input.videos.push(video);
	};
	$scope.remove_video = function(video) {
		$scope.input.videos = $scope.input.videos.filter(function(v) {
			return video != v;
		})
	};
	// 第二步
	// 课程时长
	$scope.course_durations = ["60"];
	$scope.input.course_duration = $scope.course_durations[0];
	// teaching since
	$scope.input.teaching_since = "";
	// 课程费用
	$scope.input.rate = "";
	// 教育年限
	$scope.input.teaching_age = "";
	// addtional partner
	$scope.input.partner = "";
	$scope.input.surcharge = "";
	// 打折方式
	$scope.input.discount_1 = {
		purchase: 3,
		off: 0
	};
	$scope.input.discount_2 = {
		purchase: 5,
		off: 0
	};
	$scope.input.discount_3 = {
		purchase: 10,
		off: 0
	};
	$scope.$watch("input.discount_1", function(n, o) {
		if (!n) return;
		if ($scope.input.discount_2.off < n.off) {
			$scope.input.discount_2.off = n.off;
		}
		if ($scope.input.discount_3.off < $scope.input.discount_2.off) {
			$scope.input.discount_3.off = $scope.input.discount_2.off;
		}
	}, true);
	$scope.$watch("input.discount_2", function(n, o) {
		if (!n) return;
		if ($scope.input.discount_3.off < n.off) {
			$scope.input.discount_3.off = n.off;
		}
	}, true);
	//鼠标移入提示 
	$scope.show = function() {
		if ($(".hovertips").hasClass("active")) {
			$(".hovertips").removeClass("active")
		} else {
			$(".hovertips").addClass("active")
		}
	}
	$scope.hide = function() {
		if ($(".hovertips").hasClass("active")) {
			$(".hovertips").removeClass("active")
		}
	};
	// 第三步
	$scope.input.travel_to_session = "1";
	$scope.input.distance = "";
	$scope.input.traffic_cost = "";
	$scope.input.location = {};
	$scope.input.location.street = "";
	$scope.input.location.apt = "";
	$scope.input.location.city = "";
	$scope.input.location.state = "";
	// zipcode
	$scope.input.location.zipcode = "";
	// var suggestions = [];
	// toastServices.show();
	// skillopediaServices.query_zipcode().then(function(data) {
	// 	toastServices.hide()
	// 	if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
	// 		suggestions = data.Result.CityBeans;
	// 	} else {
	// 		errorServices.autoHide(data.message);
	// 	}
	// })
	// $scope.$watch("input.zipcode", function(n, o) {
	// 	$scope.input.suggestions = filterFilter(suggestions, n);
	// })
	// $scope.select = function(s) {
	// 	$scope.input.zipcode = s.zipcode;
	// 	$timeout(function() {
	// 		$scope.input.suggestions = [];
	// 	}, 100)
	// };
	$scope.location_mode = "edit";
	$scope.lat_lng = {
		lng: 0,
		lat: 0
	}
	$scope.save_location = function() {
		toastServices.show();
		// $scope.map_url = $scope.get_map($scope.input.location.state, $scope.input.location.city, $scope.input.location.street, $scope.input.location.apt);
		googleMapServices.geocoding({
			address: $scope.input.location.street + "," + ($scope.input.location.apt || "") + "," + $scope.input.location.city + "," + $scope.input.location.state + "," + $scope.input.location.zipcode
		}).then(function(data) {
			toastServices.hide();
			var result = data.results.filter(function(r) {
				return !r.partial_match;
			});
			if (result.length == 0) {
				$scope.street_error = "The street name or number is not correct";
				return;
			}
			$scope.street_error = "";
			$scope.location_mode = "preview";
			$scope.lat_lng = result[0].geometry.location;
			$scope.format_address = result[0].formatted_address;
			var map = googleMapServices.create_map(document.getElementById('map'), $scope.lat_lng);
			// console.log(map)
			var marker = googleMapServices.create_marker(map, $scope.lat_lng);
			marker.addListener("dragend", function(e) {
				$scope.$apply(function() {
					$scope.lat_lng = e.latLng.toJSON()
				})
			})
		})
	}
	$scope.edit_location = function() {
		$scope.location_mode = "edit";
	};
	// parse iframe map url
	$scope.get_map = function(state, city, street, apt) {
		var map_url = "https://maps.google.com/maps?q=" + state + city + street + apt + "&output=embed";
		return $sce.trustAsResourceUrl(map_url);
	};
	// 第四步;
	var weeks = [],
		week_name = ["", "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
	for (var i = 0; i < 17; i++) {
		for (var j = 0; j < 8; j++) {
			// first
			if (i == 0 && j == 0) {
				weeks.push({
					week: "",
					time: "",
					check: false,
					text: "",
					type: "blank"
				});
				continue;
			}
			// first line
			if (i == 0) {
				weeks.push({
					week: "",
					time: "",
					check: false,
					text: week_name[j],
					type: "header"
				});
				continue;
			}
			// first col 
			if (j == 0) {
				var time = i + 5;
				weeks.push({
					week: "",
					time: "",
					check: false,
					text: time + ":00",
					type: "index"
				});
				continue;
			}
			weeks.push({
				week: j,
				time: 2 * i - 1,
				check: false,
				text: "",
				type: "content"
			});
		}
	}
	$scope.weeks = weeks;
	$scope.content_weeks = $scope.weeks.filter(function(w) {
		return w.type == 'content';
	});
	$scope.select_weeks = $scope.weeks.filter(function(w) {
		return w.type == "content" && w.check == true;
	});
	$scope.select_week = function(week) {
		if (week.type != 'content') {
			return;
		}
		week.check = !week.check;
		$scope.select_weeks = $scope.weeks.filter(function(w) {
			return w.type == "content" && w.check == true;
		});
	};
	$scope.check_all = function() {
		if ($scope.select_weeks.length == $scope.content_weeks.length) {
			$scope.weeks.map(function(w) {
				w.type == "content" && (w.check = false);
				return w;
			});
		} else {
			$scope.weeks.map(function(w) {
				w.type == "content" && (w.check = true);
				return w;
			});
		}
		$scope.select_weeks = $scope.weeks.filter(function(w) {
			return w.type == "content" && w.check == true;
		});
	};
	// 提交表单 最终创建课程
	$scope.ajaxForm = function() {
		toastServices.show();
		coursesServices.create_course({
			course_id: $scope.course_id,
			title: $scope.input.title,
			category_01_id: $scope.input.category_1.id,
			category_01_name: $scope.input.category_1.name,
			category_02_id: $scope.input.category_2.id,
			category_02_name: $scope.input.category_2.name,
			overview: $scope.input.overview,
			achievements: $scope.input.achievements,
			specialist: $scope.input.specialist,
			fileName: $scope.input.covers.join("#"),
			vedioURL: $scope.input.videos.map(function(video) {
				return video.url
			}).join("#"),
			session_length: $scope.input.course_duration,
			session_rate: $scope.input.rate,
			teaching_age: $scope.input.teaching_age,
			teaching_since: $scope.input.teaching_since,
			travel_to_session: $scope.input.travel_to_session,
			travel_to_session_distance: $scope.input.distance,
			travel_to_session_trafic_surcharge: $scope.input.traffic_cost,
			city: $scope.input.location.state,
			area: $scope.input.location.city,
			street: $scope.input.location.street,
			address: $scope.input.location.apt,
			zipcode: $scope.input.location.zipcode,
			latitude: $scope.lat_lng.lat,
			longitude: $scope.lat_lng.lng,
			additional_partner: $scope.input.partner,
			surcharge_for_each: $scope.input.surcharge,
			discount_type: "2", //$scope.input.discount == "by_money" ? "1" : "2",
			discount_onetion_pur_money_01: $scope.input.discount_1.purchase || "",
			discount_price_01: $scope.input.discount_1.off || "",
			discount_onetion_pur_money_02: $scope.input.discount_2.purchase || "",
			discount_price_02: $scope.input.discount_2.off || "",
			discount_onetion_pur_money_03: $scope.input.discount_3.purchase || "",
			discount_price_03: $scope.input.discount_3.off || "",
			hours: $scope.weeks.filter(function(w) {
				return w.type == "content" && w.check == true;
			}).map(function(w) {
				return w.time + "@" + w.week;
			}).join("#"),
			user_images_01: $scope.input.poster,
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message, 7000);
				$timeout(function() {
					// $rootScope.back();
					// $window.close();
					$location.path("skillopedia").replace();
				}, 7000)
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
}]);
// uploadController upload certs
angular.module("Skillopedia").controller("uploadController", ["$scope", "utilServices", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, utilServices, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.$on("flow::filesSubmitted", function(event, flow) {
		if (flow.files.length == 0) return;
		toastServices.show();
		utilServices.resizeFile(flow.files[0].file).then(function(blob) {
			var fd = new FormData();
			fd.append("image_01", blob);
			userServices.upload_image(fd).then(function(data) {
				toastServices.hide();
				$scope.cert.url = data.fileName;
				errorServices.autoHide(data.message);
			}, function(e) {
				toastServices.hide();
				errorServices.autoHide("upload error");
			})
		})
	});
	$scope.$on('flow::fileAdded', function(event, flowFile, flow) {
		if (!{
				png: 1,
				gif: 1,
				jpg: 1,
				jpeg: 1
			}[flow.getExtension()]) {
			toastServices.hide();
			errorServices.autoHide("Picture is required")
			event.preventDefault(); //prevent file from uploading
			return;
		}
	});
}]);
// uploadCoversController
angular.module("Skillopedia").controller("uploadCoversController", ["$scope", "utilServices", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, utilServices, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.$on("flow::filesSubmitted", function(event, flow) {
		if (flow.files.length == 0) return;
		toastServices.show();
		utilServices.resizeFile(flow.files[0].file).then(function(blob) {
			var fd = new FormData();
			fd.append("image_01", blob);
			userServices.upload_image(fd).then(function(data) {
				toastServices.hide();
				$scope.$flow.files = [];
				$scope.$emit("upload_cover_success", {
					message: data.fileName
				});
				errorServices.autoHide(data.message);
			}, function(e) {
				toastServices.hide();
				errorServices.autoHide("upload error");
			})
		})
	});
	$scope.$on('flow::fileAdded', function(event, flowFile, flow) {
		if (!{
				png: 1,
				gif: 1,
				jpg: 1,
				jpeg: 1
			}[flow.getExtension()]) {
			toastServices.hide();
			errorServices.autoHide("Picture is required")
			event.preventDefault(); //prevent file from uploading
			return;
		}
	});
}]);
// uploadCoversController
angular.module("Skillopedia").controller("uploadPosterController", ["$scope", "utilServices", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, utilServices, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.$on("flow::filesSubmitted", function(event, flow) {
		if (flow.files.length == 0) return;
		toastServices.show();
		utilServices.resizeFile(flow.files[0].file).then(function(blob) {
			var fd = new FormData();
			fd.append("image_01", blob);
			userServices.upload_image(fd).then(function(data) {
				toastServices.hide();
				$scope.$flow.files = [];
				$scope.$emit("upload_poster_success", {
					message: data.fileName
				});
				errorServices.autoHide(data.message);
			}, function(e) {
				toastServices.hide();
				errorServices.autoHide("upload error");
			})
		})
	});
	$scope.$on('flow::fileAdded', function(event, flowFile, flow) {
		if (!{
				png: 1,
				gif: 1,
				jpg: 1,
				jpeg: 1
			}[flow.getExtension()]) {
			toastServices.hide();
			errorServices.autoHide("Picture is required")
			event.preventDefault(); //prevent file from uploading
			return;
		}
	});
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("coursesController", ["$scope", "$rootScope", "user", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, user, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.courses = [];
	$scope.page = {
		pn: 1,
		page_size: 10,
		message: "Load More",
		latitude: "0",
		longitude: "0",
	}
	$scope.loadMore = function() {
		if ($scope.no_more) {
			return;
		}
		toastServices.show();
		$scope.page.message = "loading...";
		$scope.page.user_id = $rootScope.user.user_id;
		userServices.query_courses_by_user_id($scope.page).then(function(data) {
			toastServices.hide();
			$scope.page.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.courses = $scope.courses.concat(data.Result.Courses.list);
				$scope.no_more = $scope.courses.length == data.Result.Courses.totalRow ? true : false;
			} else {
				errorServices.autoHide("Server error");
			}
			if ($scope.no_more) {
				if ($scope.courses.length == 0) {
					$scope.page.message = "No record found";
				}
				if ($scope.courses.length == 1) {
					$scope.page.message = data.Result.Courses.totalRow + " record found ";
				}
				if ($scope.courses.length > 1) {
					$scope.page.message = data.Result.Courses.totalRow + " records found ";
				}
			}
			$scope.page.pn++;
		})

	};
	$scope.loadMore();
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("couponsExpiredController", ["$scope", "errorServices", "toastServices", "localStorageService", "config", function($scope, errorServices, toastServices, localStorageService, config) {

}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("couponsController", ["$scope", "$route", "$timeout", "errorServices", "userServices", "toastServices", "localStorageService", "config", function($scope, $route, $timeout, errorServices, userServices, toastServices, localStorageService, config) {
	$scope.input = {
		coupon_type: 1
	};
	$scope.coupons = [];
	$scope.page = {
		pn: 1,
		page_size: 1000,
		message: "Load More",
		type: $scope.input.coupon_type
	}
	$scope.loadMore = function() {
		if ($scope.no_more) {
			return;
		}
		toastServices.show();
		$scope.page.message = "loading...";
		userServices.query_coupons($scope.page).then(function(data) {
			toastServices.hide();
			$scope.page.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.coupons = $scope.coupons.concat(data.Result.MyCoupons.list);
				$scope.no_more = $scope.coupons.length == data.Result.MyCoupons.totalRow ? true : false;
			} else {
				errorServices.autoHide("Server error");
			}
			if ($scope.no_more) {
				$scope.page.message = $scope.coupons.length + " records found";
			}
			$scope.page.pn++;
		})

	}
	$scope.loadMore();
	$scope.get_coupon = function() {
		toastServices.show();
		userServices.get_coupon({
			number: $scope.input.coupon_id
		}).then(function(data) {
			$scope.input.coupon_id = "";
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$timeout(function() {
					$route.reload();
				}, 2000)
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	$scope.active_tab = function(tab_index) {
		if (tab_index == $scope.input.coupon_type) {
			return;
		}
		$scope.input.coupon_type = tab_index;
		$scope.coupons = [];
		$scope.page = {
			pn: 1,
			page_size: 1000,
			message: "Load More",
			latitude: "0",
			longitude: "0",
			type: $scope.input.coupon_type
		}
		$scope.no_more = false;
		$scope.loadMore();
	};
	$scope.remove = function(coupon, e) {
		e.preventDefault();
		e.stopPropagation();
		$scope.confirm.content = "Delete coupon ?";
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			toastServices.show();
			userServices.remove_coupon({
				my_coupon_id: coupon.my_coupon_id
			}).then(function(data) {
				toastServices.hide()
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					errorServices.autoHide(data.message);
					$timeout(function() {
						$route.reload();
					}, 2000)
				} else {
					errorServices.autoHide(data.message);
				}
			})
		}
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("contactController", ["$scope", "skillopediaServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, skillopediaServices, errorServices, toastServices, localStorageService, config) {
	$scope.input = {};
	$scope.ajaxForm = function() {
		toastServices.show();
		skillopediaServices.feedback({
			first_name: $scope.input.first_name,
			last_name: $scope.input.last_name,
			email: $scope.input.email,
			phone: $scope.input.phone,
			content: $scope.input.content,
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				errorServices.autoHide(data.message);
				$scope.input.first_name = "";
				$scope.input.last_name = "";
				$scope.input.email = "";
				$scope.input.phone = "";
				$scope.input.content = "";
			} else {
				errorServices.autoHide(data.message);
			}
		})
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("commentsController", ["$scope", "$rootScope", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.comments = [];
	$scope.page = {
		pn: 1,
		page_size: 10,
		message: "Load More"
	}
	$scope.loadMore = function() {
		if ($scope.no_more) {
			return;
		}
		toastServices.show();
		$scope.page.message = "loading...";
		$scope.page.user_id = $rootScope.user.user_id;
		userServices.query_comments_by_user_id($scope.page).then(function(data) {
			toastServices.hide();
			$scope.page.message = "Load More";
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				$scope.comments = $scope.comments.concat(data.Result.Comments.list);
				$scope.no_more = $scope.comments.length == data.Result.Comments.totalRow ? true : false;
			} else {
				errorServices.autoHide("Server error");
			}
			if ($scope.no_more) {
				if ($scope.comments.length == 0) {
					$scope.page.message = "No record found";
				}
				if ($scope.comments.length == 1) {
					$scope.page.message = data.Result.Comments.totalRow + " record found ";
				}
				if ($scope.comments.length > 1) {
					$scope.page.message = data.Result.Comments.totalRow + " records found ";
				}
			}
			$scope.page.pn++;
		})

	}
	$scope.loadMore();
	$scope.to_fix = function(m) {
		return m.toFixed(1);
	}
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("authenicationController", ["$scope", "$window", "$rootScope", "$route", "$location", "$filter", "$timeout", "skillopediaServices", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $window, $rootScope, $route, $location, $filter, $timeout, skillopediaServices, userServices, errorServices, toastServices, localStorageService, config) {
	// it's coach,redirect,agent_level:1 普通用户,2:教练
	if ($rootScope.user.agent_level == '2') {
		$rootScope.back();
		return;
	}
	$scope.listen = function() {
		$timeout(function() {
			if ($rootScope.user.course_id == 0 && $location.path() == "/authenication" && $rootScope.user.authen_status != 0) {
				userServices.sync();
				$scope.listen();
			}
		}, 1000);
	}
	$scope.listen();
	$scope.input = {};
	$scope.input.gender = "1";
	// query category list;
	skillopediaServices.query_all_second_category().then(function(data) {
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$scope.categorys = data.Result.Categorys;
		} else {
			errorServices.autoHide(data.message);
		}
	});
	$scope.progress = function(p) {
		return Math.floor(p * 100);
	}
	$scope.telephone = 0;
	// 身份证
	$scope.input.idcards = [{
		id: "",
		url: undefined,
	}, {
		id: "",
		url: undefined,
	}];
	// 提交认证
	$scope.ajaxForm = function() {
		$scope.confirm.ok_text = "Continue";
		$scope.confirm.cancel_text = "Decline";
		$scope.confirm.content_text = "Application submitted. Our administrator will review your application within 24 hours.";
		$scope.confirm.content_type = "rich_text"
		$scope.confirm.open();
		$scope.confirm.cancle_callback = function() {}
		$scope.confirm.ok_callback = function() {
			$scope.postForm();
		};
	};
	$scope.postForm = function() {
		toastServices.show();
		userServices.authenication({
			nickname: $scope.input.realname,
			sex: $scope.input.gender,
			birthday: $("input[name='birthday']").val(),
			telephone: $scope.input.telephone,
			cover_ID_01: $scope.input.idcards[0].url,
			cover_ID_02: $scope.input.idcards[1].url,
			category_name: $scope.input.category && $scope.input.category.category_02_name,
			experiences: $scope.input.experience
		}).then(function(data) {
			toastServices.hide()
			if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
				// errorServices.autoHide(data.message);
				$scope.confirm.ok_text = "Create my first course";
				$scope.confirm.cancel_text = "Leave and create my course later";
				$scope.confirm.content_text = "Application submitted. Our administrator will review your application within 24 hours.";
				$scope.confirm.content_type = "content_1"
				$scope.confirm.open();
				$scope.confirm.cancle_callback = function() {
					userServices.sync();
					$route.reload();
				}
				$scope.confirm.ok_callback = function() {
					// $location.path("create_course").search("flag", "_t");
					userServices.sync();
					$window.open($location.protocol() + "://" + $location.host() + ":" + $location.port() + "/#/create_course?flag=_t", '_blank', 'toolbar=yes, location=yes, status=yes, menubar=yes, scrollbars=yes');
				};
			} else {
				errorServices.autoHide(data.message);
			}
		})
	};
	// 认证状态
	$scope.authenication_status = ["未认证", "审核中", "审核通过", "审核失败"];
	$scope.get_status = function(status) {
		return $scope.authenication_status[status];
	};
	// 重新认证
	$scope.reauthen = function() {
		$rootScope.user.authen_status = 0;
	}
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("uploadIdcardController", ["$scope", "utilServices", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, utilServices, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.$on("flow::filesSubmitted", function(event, flow) {
		if (flow.files.length == 0) return;
		toastServices.show();
		utilServices.resizeFile(flow.files[0].file).then(function(blob) {
			var fd = new FormData();
			fd.append("image_01", blob);
			userServices.upload_image(fd).then(function(data) {
				toastServices.hide();
				$scope.card.url = data.fileName;
				errorServices.autoHide(data.message);
			}, function(e) {
				toastServices.hide();
				errorServices.autoHide("upload error");
			})
		})
	});
	$scope.$on('flow::fileAdded', function(event, flowFile, flow) {
		if (!{
				png: 1,
				gif: 1,
				jpg: 1,
				jpeg: 1
			}[flow.getExtension()]) {
			toastServices.hide();
			errorServices.autoHide("Picture is required")
			event.preventDefault(); //prevent file from uploading
			return;
		}
	});
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("accountController", ["$scope", "$rootScope", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.input = {
		nickname: "",
		password: ""
	}
	toastServices.show();
	userServices.query_basicinfo().then(function(data) {
		toastServices.hide()
		if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
			$rootScope.user = data.Result.UserInfo;
			$scope.input.nickname = $rootScope.user.nickname;
		} else {
			errorServices.autoHide(data.message);
		}
	})
	$scope.progress = function(p) {
		return Math.floor(p * 100);
	}
	$scope.ajaxForm = function() {
		if ($scope.input.password_1 != $scope.input.password_2) {
			errorServices.autoHide("Password not the same")
			return;
		}
		toastServices.show();
		userServices.rsa_key().then(function(data) {
			var crypt = new JSEncrypt(),
				private_key = data;
			crypt.setPrivateKey(private_key);
			var old_password = crypt.encrypt($scope.input.password),
				new_password = crypt.encrypt($scope.input.password_1);
			$scope.input.password = old_password;
			$scope.input.password_1 = new_password;
		}).then(function(data) {
			toastServices.show();
			userServices.modify_nickname({
				nickname: $scope.input.nickname,
				old_password: $scope.input.password,
				password: $scope.input.password_1
			}).then(function(data) {
				toastServices.hide();
				if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
					$rootScope.user.nickname = $scope.input.nickname;
					errorServices.autoHide(data.message)
				} else {
					errorServices.autoHide(data.message);
				}
				$scope.input.password = "";
				$scope.input.password_1 = "";
				$scope.input.password_2 = "";
			})
		})
	}
}]);
angular.module("Skillopedia").controller("uploadAvatarController", ["$scope", "$rootScope", "utilServices", "userServices", "errorServices", "toastServices", "localStorageService", "config", function($scope, $rootScope, utilServices, userServices, errorServices, toastServices, localStorageService, config) {
	$scope.$on("flow::filesSubmitted", function(event, flow) {
		if (flow.files.length == 0) return;
		toastServices.show();
		utilServices.resizeFile(flow.files[0].file).then(function(blob) {
			var fd = new FormData();
			fd.append("image_01", blob);
			userServices.upload_image(fd).then(function(data) {
				toastServices.hide();
				errorServices.autoHide(data.message);
				return data;
			}, function(e) {
				toastServices.hide();
				errorServices.autoHide("upload error");
			}).then(function(data) {
				if (!data) return;
				var filename = data.fileName;
				toastServices.show();
				userServices.upload_avatar({
					filename: filename
				}).then(function(data) {
					toastServices.hide();
					if (data.code == config.request.SUCCESS && data.status == config.response.SUCCESS) {
						$rootScope.user.image_01 = filename;
						errorServices.autoHide(data.message)
					} else {
						errorServices.autoHide(data.message);
					}
				})
			})
		})
	});
	$scope.$on('flow::fileAdded', function(event, flowFile, flow) {
		if (!{
				png: 1,
				gif: 1,
				jpg: 1,
				jpeg: 1
			}[flow.getExtension()]) {
			toastServices.hide();
			errorServices.autoHide("Picture is required")
			event.preventDefault(); //prevent file from uploading
			return;
		}
	});
}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").controller("aboutController", ["$scope", "errorServices", "toastServices", "localStorageService", "config", function($scope, errorServices, toastServices, localStorageService, config) {

}])
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('yearMark', function() {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, element, attrs, ctrl) {
            var month_reg = /[0-9]/,
                is_backspace = false;
            ctrl.$parsers.push(function(viewValue) {
                if (is_backspace) {
                    is_backspace = false;
                    return;
                }
                viewValue = format_year(viewValue);
                ctrl.$setViewValue(viewValue);
                if (month_reg.test(viewValue)) {
                    ctrl.$setValidity("yearMark", true);
                } else {
                    ctrl.$setValidity("yearMark", false);
                }
                ctrl.$render();
                return viewValue;
            });
            $(element).bind("keydown", function(e) {
                if (!(e.key.match(/[0-9]/) || e.key == "Backspace" || e.key == "Tab")) {
                    e.preventDefault();
                    e.stopPropagation();
                    return;
                }
                if (e.key == "Backspace" && ctrl.$viewValue) {
                    is_backspace = true;
                    return;
                }
            });

            function format_year(str) {
                if (!str) return;
                if (parseFloat(str) < parseFloat(new Date().getFullYear())) {
                    str = new Date().getFullYear();
                }
                str = str.toString().slice(0, 4);
                return str;
            };
        }
    };
});
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('mark', function() {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, element, attrs, ctrl) {
            var us_telephone = /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,
                is_backspace = false;
            ctrl.$parsers.push(function(viewValue) {
                if (is_backspace) {
                    is_backspace = false;
                    return;
                }
                viewValue = format_telephone(viewValue);
                ctrl.$setViewValue(viewValue);
                if (us_telephone.test(viewValue)) {
                    ctrl.$setValidity("mark", true);
                } else {
                    ctrl.$setValidity("mark", false);
                }
                ctrl.$render();
                return viewValue;
            });
            $(element).bind("keydown", function(e) {
                if (!(e.key.match(/[0-9]/) || e.key == "Backspace" || e.key == "Tab")) {
                    e.preventDefault();
                    e.stopPropagation();
                    return;
                }
                if (e.key == "Backspace" && ctrl.$viewValue) {
                    is_backspace = true;
                    return;
                }
            });

            function format_telephone(str) {
                if (!str) return;
                str = str.replace(/-/g, "");
                str = str.substring(0, 10);
                str = str.replace(/[0-9]{6}/, function(replacement) {
                    return replacement + "-";
                })
                str = str.replace(/[0-9]{3}/, function(replacement) {
                    return replacement + "-";
                })
                return str;
            };
        }
    };
});
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('dribehanceSlider', ["$rootScope", "$interval", "$timeout", function($rootScope, $interval, $timeout) {
	return {
		restrict: 'E',
		templateUrl: "/skillopedia/templates/slider.html",
		scope: {
			banners: "="
		},
		link: function(scope, element, attrs) {
			$(element).css({
				display: "block",
				height: $(window).height()
			})
			scope.staticImageUrl = $rootScope.staticImageUrl;
			scope.$on("onRepeatDone", function() {
				var interval_timer = $interval(function() {
					if ($('#slides').superslides) {
						$interval.cancel(interval_timer);
						$('#slides').superslides({
							animation: 'fade',
							play: 2500
						});
					}
				}, 100)
			})
		}
	};
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('sidebar', ["$rootScope", "$timeout", "config", function($rootScope, $timeout, config) {
	return {
		restrict: 'E',
		templateUrl: "/skillopedia/templates/sidebar.html",
		scope: {
			active: "=",
			user: "=",
			go: "&"
		},
		link: function(scope, element, attrs) {
			scope.staticImageUrl = config.imageUrl;
			// scope.user = $rootScope.user;
			// scope.go = $rootScope.go;
		}
	};
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('dribehanceSelect', function() {
	return {
		restrict: 'E',
		templateUrl: "/skillopedia/templates/select.html",
		scope: {
			options: "="
		},
		link: function(scope, element, attrs) {
			// function body
			scope.options = angular.extend({}, {
				all: []
			}, scope.options);
			scope.select = function(op, e) {
				scope.options.selected = op;
				$(element).find(".dribehance-options").hide();
				e.preventDefault();
				e.stopPropagation();
			}
			$(element).bind("click", function(e) {
				$(element).find(".dribehance-options").show();
				e.preventDefault();
				e.stopPropagation();
			})
			$("body").bind("click", function() {
				$(element).find(".dribehance-options").hide();
			})
		}
	};
});
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('securityCodeMark', function() {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, element, attrs, ctrl) {
            var month_reg = /[0-9]/,
                is_backspace = false;
            ctrl.$parsers.push(function(viewValue) {
                if (is_backspace) {
                    is_backspace = false;
                    return;
                }
                viewValue = format_code(viewValue);
                ctrl.$setViewValue(viewValue);
                if (month_reg.test(viewValue)) {
                    ctrl.$setValidity("securityCodeMark", true);
                } else {
                    ctrl.$setValidity("securityCodeMark", false);
                }
                ctrl.$render();
                return viewValue;
            });
            $(element).bind("keydown", function(e) {
                if (!(e.key.match(/[0-9]/) || e.key == "Backspace" || e.key == "Tab")) {
                    e.preventDefault();
                    e.stopPropagation();
                    return;
                }
                if (e.key == "Backspace" && ctrl.$viewValue) {
                    is_backspace = true;
                    return;
                }
            });

            function format_code(str) {
                if (!str) return;
                str = str.toString().slice(0, 3);
                return str;
            };
        }
    };
});
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('rangeslider', ["$timeout", function($timeout) {
	return {
		restrict: 'E',
		templateUrl: "/skillopedia/templates/rangeslider.html",
		scope: {
			max: "=",
			rangeTitle: "=",
			slideCallback: "&"
		},
		link: function(scope, element, attrs) {
			// function body
			var point = $(element).find(".range-point");
			// scope.slideCallback = scope.slideCallback;
			scope.slideCallback = scope.slideCallback();
			var inputRange = $('input[type="range"]').rangeslider({

				// Feature detection the default is `true`.
				// Set this to `false` if you want to use
				// the polyfill also in Browsers which support
				// the native <input type="range"> element.
				polyfill: false,

				// Default CSS classes
				rangeClass: 'rangeslider',
				disabledClass: 'rangeslider--disabled',
				horizontalClass: 'rangeslider--horizontal',
				verticalClass: 'rangeslider--vertical',
				fillClass: 'rangeslider__fill',
				handleClass: 'rangeslider__handle',

				// Callback function
				onInit: function() {},

				// Callback function
				onSlide: function(position, value) {
					point.css({
						left: position + 15,
					});
					scope.$apply(function() {
						scope.value = value
					})
				},
				// Callback function
				onSlideEnd: function(position, value) {
					// scope.$emit("slideEnd", value)
					scope.slideCallback(position, value);
				}
			});
			$timeout(function() {
				inputRange.attr({
					max: scope.max
				}).rangeslider("update", true);
			}, 100)
		}
	};
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('pagination', function() {
	return {
		restrict: 'E',
		templateUrl: "/skillopedia/templates/pagination.html",
		scope: {
			paging: "="
		},
		link: function(scope, element, attrs) {
			// function body
			scope.paging = angular.extend({}, {
				pn: 1,
				page_size: 10,
				total_items: 0
			}, scope.paging)
			scope.next = function() {
				scope.paging.pn++;
				scope.valid_page();
				scope.parse_page();
				if (typeof scope.paging.callback == "function") {
					scope.paging.callback()
				};
			}
			scope.prev = function() {
				scope.paging.pn--;
				scope.valid_page();
				scope.parse_page();
				if (typeof scope.paging.callback == "function") {
					scope.paging.callback()
				};
			}
			scope.jump = function(pn) {
				if (scope.paging.pn == pn) {
					return;
				}
				scope.paging.pn = pn;
				scope.valid_page();
				scope.parse_page();
				if (typeof scope.paging.callback == "function") {
					scope.paging.callback()
				};
			}
			scope.paging.pages = [];
			scope.parse_page = function() {
				scope.paging.pages = [];
				if (scope.total_pages > 5) {
					// page < 5 return
					if (scope.paging.pn < 4) {
						scope.paging.pages = ["1", "2", "3", "4", "...", scope.total_pages];
						return;
					}
					// page + 3 > scope.total_pages return
					if (scope.paging.pn + 3 > scope.total_pages) {
						scope.paging.pages = ["1", "...", scope.total_pages - 3, scope.total_pages - 2, scope.total_pages - 1, scope.total_pages];
						return;
					}
					// other
					scope.paging.pages = ["1", "...", scope.paging.pn - 1, scope.paging.pn, scope.paging.pn + 1, "...", scope.total_pages];
					return;
				}
				for (var i = 0; i < scope.total_pages; i++) {
					scope.paging.pages.push(i + 1);
				}
			}
			scope.valid_page = function() {
				scope.total_pages = Math.ceil(scope.paging.total_items / scope.paging.page_size);
				scope.paging.pn = Math.min(scope.paging.pn, scope.total_pages) || 1;
				scope.paging.pn = Math.max(1, scope.paging.pn);
			}
			scope.$watch("paging.total_items", function(n, o) {
				if (n || n === 0) {
					scope.valid_page();
					scope.parse_page();
				}
			})
		}
	};
});
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('onload', function() {
	return {
		restrict: 'A',
		link: function(scope, element, attrs) {
			// function body
			$(element).css({
				opacity: 0
			});
			$(element).bind("load", function() {
				$(element).css({
					opacity: 1
				});
			})
		}
	};
});
angular.module("Skillopedia").directive('onRepeatDone', function() {
	return {
		restrict: 'A',
		link: function(scope, el, attr) {
			if (scope.$last) {
				scope.$emit("onRepeatDone", el);
			}
		}
	};
});
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('myresource', function() {
	return {
		restrict: 'E',
		scope: {
			csResource: "=?",
			jsResource: "=?",
			jsLoaded: "&"
		},
		link: function(scope, element, attrs) {
			scope.csResource = scope.csResource || {};
			scope.jsResource = scope.jsResource || {};
			angular.forEach(scope.csResource, function(value, key) {
				var css_resource_id = "mycssresource-" + key,
					css_resource = "<link id='" + css_resource_id + "' rel='stylesheet' type='text/css' href='" + value + "'>";
				if ($("#" + css_resource_id).length == 0) {
					$("head").append(css_resource);
				}
			})
			var js_resource_size = Object.keys(scope.jsResource).length;
			scope.jsLoaded = scope.jsLoaded || angular.noop;
			angular.forEach(scope.jsResource, function(value, key) {
				var js_resource_id = "myjsresource-" + key,
					js_resource = "<script id='" + js_resource_id + "' type='text/javascript' src='" + value + "'></script>";
				if ($("#" + js_resource_id).length == 0) {
					var js, rjs = document.getElementsByTagName("script")[0];
					if (document.getElementById(js_resource_id)) {
						return;
					}
					js = document.createElement("script");
					js.id = js_resource_id;
					js.src = value;
					js.onload = function() {
						js_resource_size--;
						if (js_resource_size == 0) {
							scope.jsLoaded();
						}
					}
					rjs.parentNode.insertBefore(js, rjs);
				}
			})
		}
	};
});
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('monthMark', function() {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, element, attrs, ctrl) {
            var month_reg = /[0-9]/,
                is_backspace = false;
            ctrl.$parsers.push(function(viewValue) {
                if (is_backspace) {
                    is_backspace = false;
                    return;
                }
                viewValue = format_month(viewValue);
                ctrl.$setViewValue(viewValue);
                if (month_reg.test(viewValue)) {
                    ctrl.$setValidity("monthMark", true);
                } else {
                    ctrl.$setValidity("monthMark", false);
                }
                ctrl.$render();
                return viewValue;
            });
            $(element).bind("keydown", function(e) {
                if (!(e.key.match(/[0-9]/) || e.key == "Backspace" || e.key == "Tab")) {
                    e.preventDefault();
                    e.stopPropagation();
                    return;
                }
                if (e.key == "Backspace" && ctrl.$viewValue) {
                    is_backspace = true;
                    return;
                }
            });

            function format_month(str) {
                if (!str) return;
                if (parseFloat(str) > 12) {
                    str = 12;
                }
                return str.toString();
            };
        }
    };
});
angular.module("Skillopedia")
	.directive('imageview', ["$timeout", function($timeout) {
		return {
			restrict: 'E',
			scope: {
				src: "="
			},
			controller: ["$scope", "$element", "$attrs", function($scope, $element, $attrs) {
				$scope.bg_image = "/skillopedia/images/default.png";
				$scope.rate = parseFloat($scope.$eval($attrs.rate));
				$scope.width = $element.parent().width() || $(window).width();
				$scope.height = $scope.width / $scope.rate;
				if (!$scope.rate) {
					console.log("unexpect rate")
					return;
				}
				this.show_center_on_loaded = function(e) {
					calculate_center_image_size_on_loaded(e);
					$timeout(function() {
						calculate_center_image_size_on_loaded(e);
					}, 100)
				}
				this.show_on_loaded = function(e) {
					calculate_image_size_on_loaded(e);
					$timeout(function() {
						calculate_image_size_on_loaded(e);
					}, 100)
				}

				function calculate_center_image_size_on_loaded(e) {
					$(e.target).css({
						width: 'auto',
						height: 'auto'
					})
					var image_loaded = $(e.target),
						image_loaded_width = image_loaded.width(),
						image_loaded_height = image_loaded.height(),
						actural_rate = parseFloat(image_loaded_width) / parseFloat(image_loaded_height);
					if (actural_rate < $scope.rate) {
						image_loaded_width = $scope.width;
						image_loaded_height = $scope.width / actural_rate
						image_loaded.css({
							"display": "inline-block",
							"height": image_loaded_height,
							"width": image_loaded_width,
							"margin-top": -(image_loaded_height - $scope.height) / 2
						})
					} else {
						image_loaded_height = $scope.height
						image_loaded_width = image_loaded_height * actural_rate;
						image_loaded.css({
							"display": "inline-block",
							"height": image_loaded_height,
							"width": image_loaded_width,
							"margin-left": -(image_loaded_width - $scope.width) / 2
						})
					}
					image_loaded.parent().css({
						"background": "none"
					})
					image_loaded.css({
						"visibility": "visible"
					})
				}

				function calculate_image_size_on_loaded(e) {
					var image_loaded = $(e.target),
						image_loaded_width = image_loaded.width(),
						image_loaded_height = image_loaded.height(),
						actural_rate = parseFloat(image_loaded_width) / parseFloat(image_loaded_height);
					if (actural_rate > $scope.rate) {
						image_loaded.css({
							"display": "inline-block",
							"height": "100%",
							"width": "auto"
						})
					} else {
						image_loaded.css({
							"display": "inline-block",
							"height": "auto",
							"width": "100%"
						})
					}
					image_loaded.parent().css({
						"background": "none"
					})
					image_loaded.css({
						"visibility": "visible"
					})
				}
			}],
			template: function(element, attrs) {
				var template = "<img ng-src='{{src}}' show-center-on-loaded err-src='/skillopedia/images/default.png'>";
				if ($(element).attr('center-only') == undefined) {
					template = "<img ng-src='{{src}}' show-on-loaded err-src='/skillopedia/images/default.png'>"
				}
				return template;
			},
			link: function(scope, element, attrs, ctrl) {
				var style = {
					display: "block",
					width: scope.width,
					overflow: "hidden",
					"text-align": "center",
					"background-image": "url(" + scope.bg_image + ")",
					"background-position": "center center",
					"background-repeat": "no-repeat",
					"height": scope.height,
					"overflow": "hidden"
				}
				$(element).css(style);
			}
		};
	}])
	.directive('showOnLoaded', function() {
		return {
			restrict: "A",
			require: "^imageview",
			link: function(scope, element, attrs, ctrl) {
				element.bind('load', ctrl.show_on_loaded);
			}
		}
	}).directive('showCenterOnLoaded', function() {
		return {
			restrict: "A",
			require: "^imageview",
			link: function(scope, element, attrs, ctrl) {
				element.bind('load', ctrl.show_center_on_loaded);
			}
		}
	});
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('dribehanceGallery', ["$rootScope", "$interval", "$sce", "$timeout", function($rootScope, $interval, $sce, $timeout) {
	return {
		restrict: 'E',
		templateUrl: "/skillopedia/templates/gallery.html",
		scope: {
			galleryImage: "=",
			galleryVideo: "="
		},
		link: function(scope, element, attrs) {
			var scripts = document.getElementsByTagName("script");

			var jsFolder = "";

			for (var i = 0; i < scripts.length; i++)

			{

				if (scripts[i].src && scripts[i].src.match(/initslider-1\.js/i))

					jsFolder = scripts[i].src.substr(0, scripts[i].src.lastIndexOf("/") + 1);

			}
			scope.staticImageUrl = $rootScope.staticImageUrl;
			// parse video url
			scope.get_video = function(video) {
				if (video) {
					// ?autoplay=0
					var video = video.replace("watch?v=", "embed/");
					return $sce.trustAsResourceUrl(video);
				}
			};
			scope.$on("onRepeatDone", function() {
				var interval_timer = $interval(function() {
					if ($("#amazingslider-1").amazingslider) {
						$interval.cancel(interval_timer);
						scope.initslider()
					}
				}, 100)
			})
			scope.initslider = function() {
				$("#amazingslider-1").amazingslider({

					sliderid: 1,

					jsfolder: jsFolder,

					width: 900,

					height: 580,

					skinsfoldername: "",

					loadimageondemand: false,

					videohidecontrols: false,

					fullwidth: false,

					donotresize: true,

					enabletouchswipe: true,

					fullscreen: false,

					autoplayvideo: false,

					addmargin: true,

					transitiononfirstslide: false,

					forceflash: false,

					isresponsive: true,

					forceflashonie11: true,

					forceflashonie10: true,

					pauseonmouseover: false,

					playvideoonclickthumb: true,

					slideinterval: 5000,

					randomplay: false,

					scalemode: "fill",

					loop: 0,

					autoplay: true,

					navplayvideoimage: "/skillopedia/images/play-32-32-0.png",

					navpreviewheight: 60,

					timerheight: 2,

					descriptioncssresponsive: "font-size:12px;",

					shownumbering: false,

					skin: "Events",

					addgooglefonts: false,

					navshowplaypause: true,

					navshowplayvideo: true,

					navshowplaypausestandalonemarginx: 8,

					navshowplaypausestandalonemarginy: 8,

					navbuttonradius: 0,

					navthumbnavigationarrowimageheight: 32,

					navmarginy: 16,

					lightboxshownavigation: false,

					showshadow: false,

					navfeaturedarrowimagewidth: 16,

					navpreviewwidth: 120,

					googlefonts: "",

					navborderhighlightcolor: "",

					navcolor: "#999999",

					lightboxdescriptionbottomcss: "{color:#333; font-size:12px; font-family:Arial,Helvetica,sans-serif; overflow:hidden; text-align:left; margin:4px 0px 0px; padding: 0px;}",

					lightboxthumbwidth: 80,

					navthumbnavigationarrowimagewidth: 32,

					navthumbtitlehovercss: "text-decoration:underline;",

					navthumbmediumheight: 64,

					texteffectresponsivesize: 600,

					arrowwidth: 32,

					texteffecteasing: "easeOutCubic",

					texteffect: "slide",

					lightboxthumbheight: 60,

					navspacing: 8,

					navarrowimage: "/skillopedia/images/navarrows-28-28-0.png",

					bordercolor: "#ffffff",

					ribbonimage: "/skillopedia/images/ribbon_topleft-0.png",

					navwidth: 120,

					navheight: 60,

					arrowimage: "/skillopedia/images/arrows-32-32-0.png",

					timeropacity: 0.6,

					arrowhideonmouseleave: 1000,

					navthumbnavigationarrowimage: "/skillopedia/images/carouselarrows-32-32-0.png",

					navshowplaypausestandalone: true,

					texteffect1: "slide",

					navpreviewbordercolor: "#ffffff",

					texteffect2: "slide",

					customcss: "",

					ribbonposition: "topleft",

					navthumbdescriptioncss: "display:block;position:relative;padding:2px 4px;text-align:left;font:normal 12px Arial,Helvetica,sans-serif;color:#333;",

					lightboxtitlebottomcss: "{color:#333; font-size:14px; font-family:Armata,sans-serif,Arial; overflow:hidden; text-align:left;}",

					arrowstyle: "mouseover",

					navthumbmediumsize: 800,

					navthumbtitleheight: 18,

					textpositionmargintop: 24,

					buttoncssresponsive: "",

					navswitchonmouseover: false,

					playvideoimage: "/skillopedia/images/playvideo-64-64-0.png",

					arrowtop: 50,

					textstyle: "none",

					playvideoimageheight: 64,

					navfonthighlightcolor: "#666666",

					showbackgroundimage: false,

					navpreviewborder: 4,

					navshowplaypausestandaloneheight: 48,

					navdirection: "horizontal",

					navbuttonshowbgimage: true,

					navbuttonbgimage: "/skillopedia/images/navbuttonbgimage-28-28-0.png",

					textbgcss: "display:none;",

					textpositiondynamic: "bottomleft",

					playvideoimagewidth: 64,

					buttoncss: "display:block; position:relative; margin-top:8px;",

					navborder: 2,

					navshowpreviewontouch: false,

					bottomshadowimagewidth: 96,

					showtimer: false,

					navradius: 0,

					navmultirows: false,

					navshowpreview: false,

					navpreviewarrowheight: 8,

					navmarginx: 16,

					navfeaturedarrowimage: "/skillopedia/images/featuredarrow-16-8-0.png",

					navthumbsmallsize: 480,

					showribbon: false,

					navstyle: "thumbnails",

					textpositionmarginleft: 24,

					descriptioncss: "display:block; position:relative; font:12px \"Lucida Sans Unicode\",\"Lucida Grande\",sans-serif,Arial; color:#fff; margin-top:8px;",

					navplaypauseimage: "/skillopedia/images/navplaypause-48-48-0.png",

					backgroundimagetop: -10,

					timercolor: "#ffffff",

					numberingformat: "%NUM/%TOTAL ",

					navthumbmediumwidth: 64,

					navfontsize: 12,

					navhighlightcolor: "#333333",

					texteffectdelay1: 1000,

					navimage: "/skillopedia/images/bullet-24-24-5.png",

					texteffectdelay2: 1500,

					texteffectduration1: 600,

					navshowplaypausestandaloneautohide: true,

					texteffectduration2: 600,

					navbuttoncolor: "",

					navshowarrow: false,

					texteffectslidedirection: "left",

					navshowfeaturedarrow: true,

					lightboxbarheight: 64,

					titlecss: "display:block; position:relative; font:bold 14px \"Lucida Sans Unicode\",\"Lucida Grande\",sans-serif,Arial; color:#fff;",

					ribbonimagey: 0,

					ribbonimagex: 0,

					navthumbsmallheight: 48,

					texteffectslidedistance1: 120,

					texteffectslidedistance2: 120,

					navrowspacing: 8,

					navshowplaypausestandaloneposition: "bottomright",

					shadowsize: 5,

					lightboxthumbtopmargin: 12,

					titlecssresponsive: "font-size:12px;",

					navshowplaypausestandalonewidth: 48,

					navthumbresponsive: false,

					navfeaturedarrowimageheight: 8,

					navopacity: 0.8,

					textpositionmarginright: 24,

					backgroundimagewidth: 120,

					textautohide: true,

					navthumbtitlewidth: 120,

					navpreviewposition: "top",

					texteffectseparate: false,

					arrowheight: 32,

					shadowcolor: "#aaaaaa",

					arrowmargin: 8,

					texteffectduration: 600,

					bottomshadowimage: "/skillopedia/images/bottomshadow-110-95-4.png",

					border: 6,

					lightboxshowdescription: false,

					timerposition: "bottom",

					navfontcolor: "#333333",

					navthumbnavigationstyle: "arrow",

					borderradius: 0,

					navbuttonhighlightcolor: "",

					textpositionstatic: "bottom",

					texteffecteasing2: "easeOutCubic",

					navthumbstyle: "imageonly",

					texteffecteasing1: "easeOutCubic",

					textcss: "display:block; padding:12px; text-align:left;",

					navthumbsmallwidth: 48,

					navbordercolor: "#ffffff",

					navpreviewarrowimage: "/skillopedia/images/previewarrow-16-8-0.png",

					navthumbtitlecss: "display:block;position:relative;padding:2px 4px;text-align:center;font:bold 12px Arial,Helvetica,sans-serif;color:#333;",

					showbottomshadow: false,

					texteffectslidedistance: 30,

					texteffectdelay: 500,

					textpositionmarginstatic: 0,

					backgroundimage: "/skillopedia/images/",

					navposition: "bottom",

					texteffectslidedirection1: "right",

					navpreviewarrowwidth: 16,

					textformat: "Bottom left",

					texteffectslidedirection2: "right",

					bottomshadowimagetop: 98,

					texteffectresponsive: true,

					navshowbuttons: false,

					lightboxthumbbottommargin: 8,

					textpositionmarginbottom: 24,

					lightboxshowtitle: true,

					fade: {

						duration: 1000,

						easing: "easeOutCubic",

						checked: true

					},

					transition: "fade",

					scalemode: "fit",

					isfullscreen: false,

					textformat: {



					}

				});
			}
		}
	};
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('errSrc', function() {
	return {
		restrict: 'A',
		link: function(scope, element, attrs) {
			// function body
			$(element).bind("error", function() {
				$(element).attr("src", attrs.errSrc);
			});
		}
	};
});
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('confirm', function() {
	return {
		restrict: 'E',
		scope: {
			confirm: "="
		},
		templateUrl: "/skillopedia/templates/confirm.html",
		link: function(scope, element, attrs) {
			// function body
			scope.input = {};
			scope.input.location = {};
			scope.check = function() {
				return scope.checked = !scope.checked;
			}
			scope.confirm = angular.extend({}, {
				title: "Tips",
				content: "Are You Sure?",
				content_type: "content",
				cancel_text: "Cancel",
				ok_text: "Ok",
				open: function() {
					$(element).show();
					$("body").css({
						overflow: "hidden"
					});
				},
				close: function() {
					$(element).hide();
					$("body").css({
						overflow: "auto"
					});
				},
				cancel: function() {
					$(element).hide();
					$("body").css({
						overflow: "auto"
					});
					if (typeof scope.confirm.cancle_callback == "function") {
						scope.confirm.cancle_callback();
					}
				},
				ok: function() {
					$(element).hide();
					$("body").css({
						overflow: "auto"
					});
					if (scope.confirm.content_type == "rich_text" && !scope.checked) {
						return;
					}
					if (typeof scope.confirm.ok_callback == "function") {
						scope.confirm.ok_callback();
						scope.confirm.content_type = "content";
					}
				},
				ok_submit: function() {
					scope.confirm.content = scope.input.location.address; //$(element).find("input").val();
					scope.confirm.location = scope.input.location;
					if (!scope.confirm.content) return;
					$("body").css({
						overflow: "auto"
					});
					$(element).hide();
					if (typeof scope.confirm.ok_callback == "function") {
						scope.confirm.ok_callback();
						scope.confirm.content_type = "content";
					}
				}
			}, scope.confirm);
		}
	};
});
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('calendar', ["$filter", "localStorageService", function($filter, localStorageService) {
	return {
		restrict: 'E',
		templateUrl: '/skillopedia/templates/calendar.html',
		scope: {
			calendar: "=",
		},
		link: function(scope, element, attrs) {
			var today = new Date();
			today.setDate(today.getDate() - 1);
			scope.nowaday = $filter("date")(today, "yyyy-MM-dd");

			scope.calendar = angular.extend({}, scope.calendar);
			scope.calendar.day = scope.calendar.day || $filter("date")(new Date().getTime(), "MMM dd,yyyy");
			// edit mode
			scope.$watch("calendar.day", function(n, o) {
				if (n && typeof scope.calendar.onDayChange == "function") {
					scope.calendar.onDayChange()
				}
			})
			if (scope.calendar.mode == "edit") {
				// scope.calendar = angular.extend({}, scope.calendar);
				scope.calendar.selected = [];
				scope.select = function(time, index) {
					var next = index + 1;
					next = next > scope.calendar.times.length - 1 ? scope.calendar.times.length - 1 : next;
					if (index == next) {
						return;
					}
					// schedule_state_1 disabled,schedule_state_2 busy,schedule_state_3 free
					if (time.schedule_state == 3 && scope.calendar.times[next].schedule_state == 3 && scope.calendar.selected.length < scope.calendar.size) {
						time.schedule_state = 2;
						time.active = true;
						var selected_time = {
							from: time,
							to: scope.calendar.times[next]
						}
						scope.calendar.times[next].schedule_state = 2;
						scope.calendar.times[next].active = true;
						scope.calendar.selected.push(selected_time);
						return;
					}
					if (time.schedule_state == 2) {
						scope.calendar.selected.map(function(t) {
							if (t.from == time || t.to == time) {
								scope.calendar.remove(t);
							}
							return t;
						})
						return;
					}
				};
				scope.calendar.remove = function(selected) {
					scope.calendar.selected = scope.calendar.selected.filter(function(s) {
						return s != selected;
					})
					scope.calendar.times = scope.calendar.times.map(function(t) {
						if ((t.day == selected.from.day && t.hour == selected.from.hour) || (t.day == selected.to.day && t.hour == selected.to.hour)) {
							t.schedule_state = 3;
							t.active = false;
						}
						return t;
					});
				}
				return;
			};
			// confirm mode
			if (scope.calendar.mode == "confirm") {
				// scope.calendar = angular.extend({}, scope.calendar);
				scope.calendar.selected = [];
				scope.select = function(time, index) {
					// var next = index + 1;
					// next = next > scope.calendar.times.length - 1 ? scope.calendar.times.length - 1 : next;
					// if (index == next) {
					// 	return;
					// }
					var next = 0;
					scope.calendar.default_selected.map(function(s) {
						if (s.from.hour == time.hour) {
							next = index + 1;
						}
						if (s.to.hour == time.hour) {
							next = index - 1;
						}
						return s;
					});
					// schedule_state_1 disabled,schedule_state_2 busy,schedule_state_3 free
					if (time.schedule_state == 3 && scope.calendar.times[next].schedule_state == 3 && scope.calendar.selected.length < scope.calendar.size) {
						time.schedule_state = 2;
						time.active = true;
						var selected_time = {
							from: time,
							to: scope.calendar.times[next]
						}
						scope.calendar.times[next].schedule_state = 2;
						scope.calendar.times[next].active = true;
						scope.calendar.selected.push(selected_time);
					}
				};
				scope.calendar.remove = function(selected) {
					scope.calendar.selected = scope.calendar.selected.filter(function(s) {
						return s != selected;
					})
					scope.calendar.times = scope.calendar.times.map(function(t) {
						if ((t.day == selected.from.day && t.hour == selected.from.hour) || (t.day == selected.to.day && t.hour == selected.to.hour)) {
							t.schedule_state = 3;
							t.active = false;
						}
						return t;
					});
				}
				return;
			};
			// preview model
			if (scope.calendar.mode == "preview") {
				// var last = current = {};
				// scope.select = function(time, index) {
				// 	last = current;
				// 	current = time;
				// 	last.active = false;
				// 	current.active = true;
				// 	scope.calendar.selected = time;
				// };
				scope.calendar.selected = [];
				scope.select = function(time, index) {
					time.active = !time.active;
					time.active && scope.calendar.selected.push(time);
				};
			}
		}
	};
}]);
// by dribehance <dribehance.kksdapp.com>
angular.module("Skillopedia").directive('autocomplete', ["$window", "$timeout", function($window, $timeout) {
	return {
		restrict: 'E',
		scope: {
			location: "=",
			placeholder: "=?",
			mode: "=?"
		},
		templateUrl: "/skillopedia/templates/autocomplete.html",
		link: function(scope, element, attrs) {
			// function body
			// This example displays an address form, using the autocomplete feature
			// of the Google Places API to help users fill in the information.
			scope.placeholder = scope.placeholder || "Street address or Zip Code";
			// set default value
			scope.location = scope.location || {};
			var placeSearch, autocomplete;
			var componentForm = {
				street_number: 'short_name',
				route: 'long_name',
				locality: 'long_name',
				administrative_area_level_1: 'short_name',
				country: 'long_name',
				postal_code: 'short_name'
			};

			function initAutocomplete() {
				// Create the autocomplete object, restricting the search to geographical
				// location types.
				if (!google) return;
				autocomplete = new google.maps.places.Autocomplete(
					/** @type {!HTMLInputElement} */
					($(element).find("input")[0]), {
						// types: ['geocode']
					});

				// When the user selects an address from the dropdown, populate the address
				// fields in the form.
				autocomplete.addListener('place_changed', fillInAddress);
				// geolocate();
			}

			// [START region_fillform]
			function fillInAddress() {
				// Get the place details from the autocomplete object.
				var place = autocomplete.getPlace();
				// angular.element("#autocomplete").val("");
				// for (var component in componentForm) {
				// 	document.getElementById(component).location = '';
				// 	document.getElementById(component).disabled = false;
				// }
				// Get each component of the address from the place details
				// and fill the corresponding field on the form.
				var address = {};
				for (var i = 0; i < place.address_components.length; i++) {
					var addressType = place.address_components[i].types[0];
					if (componentForm[addressType]) {
						var val = place.address_components[i][componentForm[addressType]];
						address[addressType] = val;
						// document.getElementById(addressType).location = val;
					}
				}
				// assign to scope.location
				scope.$apply(function() {
					scope.location.street = "";
					if (address.street_number) {
						scope.location.street += address.street_number;
					}
					if (address.route) {
						scope.location.street += " " + address.route;
					}
					scope.location.country = address.country || "";
					scope.location.state = address.administrative_area_level_1 || "";
					scope.location.city = address.locality || "";
					scope.location.zipcode = address.postal_code || "";
					scope.location.address = (scope.location.street && (scope.location.street + ", ")) + (scope.location.city && (scope.location.city + ", ")) + (scope.location.state && (scope.location.state + ", ")) + scope.location.country;
					if (scope.mode == "street") {
						angular.element("#autocomplete").val(scope.location.street);
					} else {
						angular.element("#autocomplete").val(scope.location.address);
					}
				});
				// scope.location = address;
			}
			// [END region_fillform]

			// [START region_geolocation]
			// Bias the autocomplete object to the user's geographical location,
			// as supplied by the browser's 'navigator.geolocation' object.
			function geolocate() {
				if (navigator.geolocation) {
					navigator.geolocation.getCurrentPosition(function(position) {
						var geolocation = {
							lat: position.coords.latitude,
							lng: position.coords.longitude
						};
						var circle = new google.maps.Circle({
							center: geolocation,
							radius: position.coords.accuracy
						});
						autocomplete.setBounds(circle.getBounds());
					});
				}
			}
			// [END region_geolocation]
			scope.autocomplete = function() {
				if (!autocomplete) {
					initAutocomplete();
				}
				// geolocate();
			};
			// $window.initAutocomplete = initAutocomplete;
			// google.map.addDomEventlistner("window")
		}
	};
}]);
angular.module("Skillopedia").constant("config", {
	url: "http://localhost:8080",
	imageUrl: "http://localhost:8080/files/image?name=",
	request: {
		"SUCCESS": "200",
		"TOKEN_INVALID": "405"
	},
	response: {
		"SUCCESS": 1
	},
	common_params: {
		invoke: "h5",
		app_sign: "123456"
	},
	key: {
		google: "AIzaSyDimOSOuBupzzpGhzX9lspVfLWaHW-6DNI",
		google_browser_key: "AIzaSyCpIyQ3HnXddxyv9KOyeX0IdMPazzSIH0I"
	},
	interceptor: [
		"about",
		"account",
		"authenication",
		"comments",
		"contact",
		"coupons_expired",
		"coupons",
		"courses",
		"create_course",
		"create_step",
		"detail",
		"edit_course",
		"edit_step",
		"favourite",
		"fillinorder",
		"forget",
		"index",
		"list",
		"landing",
		"messages",
		"order",
		"order_booking",
		"order_cancel",
		"order_comment",
		"order_confirm",
		"order_finish",
		"order_management",
		"order_refund",
		"orders",
		"orders_management",
		"privacy",
		"refund_policy",
		"payment",
		"schedule",
		"services",
		"shoppingcart",
		"search",
		"skillopedia",
		"step",
		"steps",
		"steps_draft",
		"steps_publish",
		"support",
		"show",
		"show_comments",
		"show_steps",
	]
});
//# sourceMappingURL=app.min.js.map
